<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哈晓周🐷</title>
  
  
  <link href="https://hitszzhoujy.com/atom.xml" rel="self"/>
  
  <link href="https://hitszzhoujy.com/"/>
  <updated>2024-02-23T02:06:04.856Z</updated>
  <id>https://hitszzhoujy.com/</id>
  
  <author>
    <name>zjy🐷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>美赛-数据处理</title>
    <link href="https://hitszzhoujy.com/posts/c8b9b87c.html"/>
    <id>https://hitszzhoujy.com/posts/c8b9b87c.html</id>
    <published>2024-01-31T09:14:35.000Z</published>
    <updated>2024-02-23T02:06:04.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遍历每一个文件夹"><a href="#遍历每一个文件夹" class="headerlink" title="遍历每一个文件夹"></a>遍历每一个文件夹</h2><h3 id="把处理后的数据放在原文件夹"><a href="#把处理后的数据放在原文件夹" class="headerlink" title="把处理后的数据放在原文件夹"></a>把处理后的数据放在原文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建一个空的DataFrame，用于存储所有txt文件的数据</span></span><br><span class="line">final_df = pd.DataFrame()</span><br><span class="line"><span class="comment"># 指定包含txt文件的文件夹路径</span></span><br><span class="line">txt_folder = <span class="string">&#x27;data/参考数据集/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹中的每个txt文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subdir <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    subpath = os.path.join(txt_folder,<span class="built_in">str</span>(subdir))</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subpath):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">            txt_file_path = os.path.join(subpath,filename)</span><br><span class="line">            data_np = np.loadtxt(txt_file_path)</span><br><span class="line">            data_np = data_np.T</span><br><span class="line">            data_df = pd.DataFrame(data_np)</span><br><span class="line">            data_df.to_excel(txt_file_path.replace(<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.xlsx&#x27;</span>), index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据已导入到Excel文件&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">美赛数据处理部分总结</summary>
    
    
    
    <category term="美赛" scheme="https://hitszzhoujy.com/categories/%E7%BE%8E%E8%B5%9B/"/>
    
    
    <category term="美赛" scheme="https://hitszzhoujy.com/tags/%E7%BE%8E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>数模-绘图</title>
    <link href="https://hitszzhoujy.com/posts/2150b70.html"/>
    <id>https://hitszzhoujy.com/posts/2150b70.html</id>
    <published>2024-01-30T13:38:48.000Z</published>
    <updated>2024-01-31T08:58:28.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本配置">基本配置</h2><p>画任何图片之前,先运行下面这段代码,包括导包,调整字体,字号,清晰度等等.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="comment"># 设置全局字体为Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line"><span class="comment"># 设置字号为12pt</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局变量,使得图例的大小为26pt</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;legend.fontsize&#x27;</span>] = <span class="number">26</span></span><br><span class="line"><span class="comment"># 设置全局变量,使得text的大小为20pt</span></span><br><span class="line">fontsize_text = <span class="number">20</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.titlesize&#x27;</span>] = fontsize_text</span><br><span class="line"><span class="comment"># 设置全局变量</span></span><br><span class="line"><span class="comment"># 清晰</span></span><br><span class="line">%config InlineBackend.figure_format = <span class="string">&#x27;retina&#x27;</span></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h2 id="线形图">线形图</h2><p>以华数杯的这个线形图为例,同时这个代码也展示了怎么开双轴.</p><p>小tip:如果横坐标需要显示为整数,但却自动变为小数,可以把该坐标调成str格式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig_wind,ax_wind = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">ax_wind.plot(df[<span class="string">&#x27;time&#x27;</span>][<span class="number">0</span>:<span class="number">9</span>].astype(<span class="built_in">str</span>),df[<span class="string">&#x27;风电生产电力量(亿千瓦小时)&#x27;</span>][<span class="number">0</span>:<span class="number">9</span>],<span class="string">&#x27;o--&#x27;</span>,color=<span class="string">&#x27;#709ED0&#x27;</span>,linewidth=<span class="number">3</span>,label=<span class="string">&#x27;Inverse conjecture data&#x27;</span>)</span><br><span class="line">ax_wind.plot(df[<span class="string">&#x27;time&#x27;</span>][<span class="number">8</span>:-<span class="number">1</span>].astype(<span class="built_in">str</span>),df[<span class="string">&#x27;风电生产电力量(亿千瓦小时)&#x27;</span>][<span class="number">8</span>:-<span class="number">1</span>],<span class="string">&#x27;o-&#x27;</span>,color=<span class="string">&#x27;#3C979F&#x27;</span>,linewidth=<span class="number">3</span>,label = <span class="string">&#x27;Real data&#x27;</span>)</span><br><span class="line">ax_wind.set_xlabel(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">ax_wind.set_ylabel(<span class="string">r&#x27;Electricity Production($\mathrm&#123;1\cdot 10^8&#125;$KWh)&#x27;</span>, fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">ax_wind.grid(<span class="literal">True</span>)</span><br><span class="line">ax_wind.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(df[<span class="string">&#x27;time&#x27;</span>])-<span class="number">1</span>):</span><br><span class="line">    ax_wind.text(df[<span class="string">&#x27;time&#x27;</span>][i].astype(<span class="built_in">str</span>),df[<span class="string">&#x27;风电生产电力量(亿千瓦小时)&#x27;</span>][i]+<span class="number">70</span>,<span class="built_in">round</span>(df[<span class="string">&#x27;风电生产电力量(亿千瓦小时)&#x27;</span>][i],<span class="number">2</span>),ha=<span class="string">&#x27;center&#x27;</span>,va=<span class="string">&#x27;bottom&#x27;</span>,fontsize=fontsize_text)</span><br><span class="line">ax_wind.xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">2</span>))</span><br><span class="line">ax2_wind = ax_wind.twinx()</span><br><span class="line"><span class="comment"># 设置这个轴的颜色为蓝色</span></span><br><span class="line">ax2_wind.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">ax2_wind.set_ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 清洁能源百分比的英文为:Percentage of Clean Energy</span></span><br><span class="line">ax2_wind.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, length=<span class="number">0</span>, pad=-<span class="number">10</span>) <span class="comment"># 设置y轴刻度的长度为0,并且把刻度与轴的距离设置为-10</span></span><br><span class="line">ax2_wind.set_ylabel(<span class="string">&#x27;Percentage&#x27;</span>,color = <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">ax2_wind.set_yticks(np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">11</span>)) <span class="comment"># 设置y轴的刻度为0-1,共11个</span></span><br><span class="line"><span class="comment"># 设置这个轴的颜色为黑色</span></span><br><span class="line">ax2_wind.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">ax2_wind.set_yticklabels([<span class="built_in">str</span>(i*<span class="number">10</span>)+<span class="string">&#x27;%&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>)],color = <span class="string">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401302230193.png" alt=""></p><h2 id="堆叠图">堆叠图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">fig , ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">colors = [<span class="string">&#x27;#416F5D&#x27;</span>,<span class="string">&#x27;#709ED0&#x27;</span>]</span><br><span class="line">clean  = df[<span class="string">&#x27;核电生产电力量(亿千瓦小时)&#x27;</span>] + df[<span class="string">&#x27;水电生产电力量(亿千瓦小时)&#x27;</span>] +df[<span class="string">&#x27;风电生产电力量(亿千瓦小时)&#x27;</span>]</span><br><span class="line">pollution = df[<span class="string">&#x27;火电生产电力量(亿千瓦小时)&#x27;</span>]</span><br><span class="line">ax.stackplot(df[<span class="string">&#x27;time&#x27;</span>].astype(<span class="built_in">str</span>) , clean,pollution,colors=colors,labels=[<span class="string">&#x27;Clean&#x27;</span>,<span class="string">&#x27;Pollution&#x27;</span>],alpha=<span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 把legend放到左上角</span></span><br><span class="line">ax.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"><span class="comment"># 在每个点上画出数值</span></span><br><span class="line"><span class="comment"># for i in range(0,len(df[&#x27;time&#x27;])-1):</span></span><br><span class="line"><span class="comment">#     ax.text(df[&#x27;time&#x27;][i].astype(str),clean[i]+pollution[i],round(clean[i]+pollution[i],2),ha=&#x27;center&#x27;,va=&#x27;bottom&#x27;,fontsize=15)</span></span><br><span class="line"><span class="comment"># 在右边加一列新的坐标轴,并且设置为百分比</span></span><br><span class="line">ax2 = ax.twinx()</span><br><span class="line"><span class="comment"># 设置这个轴的颜色为蓝色</span></span><br><span class="line">ax2.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;#3C979F&#x27;</span>)</span><br><span class="line">ax2.set_ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 清洁能源百分比的英文为:Percentage of Clean Energy</span></span><br><span class="line"></span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;Percentage&#x27;</span>,color = <span class="string">&#x27;#3C979F&#x27;</span>)</span><br><span class="line">ax2.set_yticks(np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">11</span>)) <span class="comment"># 设置y轴的刻度为0-1,共11个</span></span><br><span class="line">ax2.set_yticklabels([<span class="built_in">str</span>(i*<span class="number">10</span>)+<span class="string">&#x27;%&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>)],color = <span class="string">&#x27;#3C979F&#x27;</span>)</span><br><span class="line"><span class="comment"># 在图中新画一条折线,表示clean的占比</span></span><br><span class="line">ax2.plot(df[<span class="string">&#x27;time&#x27;</span>].astype(<span class="built_in">str</span>),clean/(clean+pollution),<span class="string">&#x27;o&#x27;</span>,color=<span class="string">&#x27;#3C979F&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,linewidth=<span class="number">3</span>,label=<span class="string">&#x27;Percentage of Clean Energy&#x27;</span>,markevery=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(df[<span class="string">&#x27;time&#x27;</span>]),<span class="number">2</span>):</span><br><span class="line">    ax2.text(df[<span class="string">&#x27;time&#x27;</span>][i].astype(<span class="built_in">str</span>),clean[i]/(clean[i]+pollution[i])+<span class="number">0.01</span>,<span class="built_in">str</span>(<span class="built_in">round</span>(clean[i]/(clean[i]+pollution[i])*<span class="number">100</span>,<span class="number">2</span>))+<span class="string">&#x27;%&#x27;</span>,ha=<span class="string">&#x27;center&#x27;</span>,va=<span class="string">&#x27;bottom&#x27;</span>,fontsize = <span class="number">20</span>)</span><br><span class="line">ax2.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Electricity Production ($1\cdot 10^8$KWh)&#x27;</span>)</span><br><span class="line">ax.grid(<span class="literal">True</span>,alpha = <span class="number">0.3</span>)</span><br><span class="line"><span class="comment"># 获取 ax 的图例句柄和标签</span></span><br><span class="line">handles1, labels1 = ax.get_legend_handles_labels()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 ax2 的图例句柄和标签</span></span><br><span class="line">handles2, labels2 = ax2.get_legend_handles_labels()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并所有的图例句柄和标签</span></span><br><span class="line">handles = handles1 + handles2</span><br><span class="line">labels = labels1 + labels2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的图例</span></span><br><span class="line">fig.legend(handles, labels, loc=(<span class="number">0.14</span>,<span class="number">0.72</span>),prop = &#123;<span class="string">&#x27;size&#x27;</span>:<span class="number">28</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除原来的图例</span></span><br><span class="line">ax.get_legend().remove()</span><br><span class="line">ax2.get_legend().remove()</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401302232644.png" alt=""></p><h2 id="比例图">比例图</h2><p>比例图以封装成一个函数,画图时只用改变results和category_names<br>由于legend是放在图片外面,故图片真实大小不是(16,8),故调整为(22,11),字体也随之按比例改变<br>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">category_names = [<span class="string">&#x27;Wildlife protection section&#x27;</span>,<span class="string">&#x27;Natural reserve section&#x27;</span>,<span class="string">&#x27;Ecological restoration section&#x27;</span>,<span class="string">&#x27;Ecological compensation section&#x27;</span>]</span><br><span class="line">results = &#123;</span><br><span class="line">    <span class="string">&#x27;Wildlife&#x27;</span>:[<span class="number">0.51</span>,<span class="number">0.25</span>,<span class="number">0.06</span>,<span class="number">0.18</span>],</span><br><span class="line">    <span class="string">&#x27;Human&#x27;</span>:[<span class="number">0.14</span>,<span class="number">0.1</span>,<span class="number">0.35</span>,<span class="number">0.41</span>],</span><br><span class="line">    <span class="string">&#x27;Livestock&#x27;</span>:[<span class="number">0.16</span>,<span class="number">0.29</span>,<span class="number">0.12</span>,<span class="number">0.44</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">survey</span>(<span class="params">results, category_names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    results : dict</span></span><br><span class="line"><span class="string">        A mapping from question labels to a list of answers per category.</span></span><br><span class="line"><span class="string">        It is assumed all lists contain the same number of entries and that</span></span><br><span class="line"><span class="string">        it matches the length of *category_names*.</span></span><br><span class="line"><span class="string">    category_names : list of str</span></span><br><span class="line"><span class="string">        The category labels.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    labels = <span class="built_in">list</span>(results.keys())</span><br><span class="line">    data = np.array(<span class="built_in">list</span>(results.values()))</span><br><span class="line">    data_cum = data.cumsum(axis=<span class="number">1</span>)</span><br><span class="line">    category_colors = [<span class="string">&#x27;#416F5D&#x27;</span>, <span class="string">&#x27;#3C979F&#x27;</span>, <span class="string">&#x27;#709ED0&#x27;</span>, <span class="string">&#x27;#A1608C&#x27;</span>, <span class="string">&#x27;#CF948E&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">22</span>,<span class="number">11</span>))</span><br><span class="line">    ax.invert_yaxis()</span><br><span class="line">    ax.xaxis.set_visible(<span class="literal">True</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># Set x-axis limits to 0 and 1 for percentage</span></span><br><span class="line">    </span><br><span class="line">    ax.tick_params(axis=<span class="string">&#x27;y&#x27;</span>,labelsize = <span class="number">44</span>)</span><br><span class="line">    ax.tick_params(axis=<span class="string">&#x27;x&#x27;</span>,labelsize = <span class="number">44</span>)</span><br><span class="line">    <span class="comment"># Format x-axis labels as percentages</span></span><br><span class="line">    ax.xaxis.set_major_formatter(mticker.FuncFormatter(<span class="string">&#x27;&#123;:.0%&#125;&#x27;</span>.<span class="built_in">format</span>))</span><br><span class="line">    ax.set_xticks(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.2</span>))  <span class="comment"># Set x-axis ticks at every 20%</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (colname, color) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(category_names, category_colors)):</span><br><span class="line">        widths = data[:, i]</span><br><span class="line">        starts = data_cum[:, i] - widths</span><br><span class="line">        rects = ax.barh(labels, widths, left=starts, height=<span class="number">0.5</span>,</span><br><span class="line">                        label=colname, color=color, edgecolor=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        r, g, b = matplotlib.colors.to_rgb(color)</span><br><span class="line">        text_color = <span class="string">&#x27;white&#x27;</span> <span class="keyword">if</span> r * g * b &lt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="string">&#x27;darkgrey&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">            width = rect.get_width()</span><br><span class="line">            ax.text(rect.get_x() + width / <span class="number">2</span>,</span><br><span class="line">                    rect.get_y() + rect.get_height() / <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;&#123;:.0%&#125;&quot;</span>.<span class="built_in">format</span>(width),</span><br><span class="line">                    ha=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    va=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    color=text_color,</span><br><span class="line">                    weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax.legend(ncols=<span class="number">1</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">              loc=<span class="string">&#x27;upper left&#x27;</span>, fontsize=<span class="number">22</span>/<span class="number">16</span>*<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the thickness of the axis spines</span></span><br><span class="line">    <span class="keyword">for</span> spine <span class="keyword">in</span> ax.spines.values():</span><br><span class="line">        spine.set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fig, ax</span><br><span class="line"></span><br><span class="line">survey(results, category_names)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401311448867.png" alt=""></p><h2 id="热力图">热力图</h2><p>和比例图类似,热力图中的字体大小也需要另外调整,现已经在函数中修改:<br>函数代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heatmap</span>(<span class="params">data, row_labels, col_labels, ax=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">            cbar_kw=<span class="literal">None</span>, cbarlabel=<span class="string">&quot;&quot;</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a heatmap from a numpy array and two lists of labels.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    data</span></span><br><span class="line"><span class="string">        A 2D numpy array of shape (M, N).</span></span><br><span class="line"><span class="string">    row_labels</span></span><br><span class="line"><span class="string">        A list or array of length M with the labels for the rows.</span></span><br><span class="line"><span class="string">    col_labels</span></span><br><span class="line"><span class="string">        A list or array of length N with the labels for the columns.</span></span><br><span class="line"><span class="string">    ax</span></span><br><span class="line"><span class="string">        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If</span></span><br><span class="line"><span class="string">        not provided, use current axes or create a new one.  Optional.</span></span><br><span class="line"><span class="string">    cbar_kw</span></span><br><span class="line"><span class="string">        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.</span></span><br><span class="line"><span class="string">    cbarlabel</span></span><br><span class="line"><span class="string">        The label for the colorbar.  Optional.</span></span><br><span class="line"><span class="string">    **kwargs</span></span><br><span class="line"><span class="string">        All other arguments are forwarded to `imshow`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ax <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        ax = plt.gca()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cbar_kw <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        cbar_kw = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot the heatmap</span></span><br><span class="line">    im = ax.imshow(data, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create colorbar</span></span><br><span class="line">    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)</span><br><span class="line">    cbar.ax.set_ylabel(cbarlabel, rotation=-<span class="number">90</span>, va=<span class="string">&quot;bottom&quot;</span>,fontsize = <span class="number">20</span>)</span><br><span class="line">    cbar.ax.tick_params(labelsize=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># Show all ticks and label them with the respective list entries.</span></span><br><span class="line">    ax.set_xticks(np.arange(data.shape[<span class="number">1</span>]), labels=col_labels)</span><br><span class="line">    ax.set_yticks(np.arange(data.shape[<span class="number">0</span>]), labels=row_labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调整字体大小</span></span><br><span class="line">    ax.set_xticklabels(ax.get_xticklabels(), fontsize=<span class="number">20</span>)</span><br><span class="line">    ax.set_yticklabels(ax.get_yticklabels(), fontsize=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># Let the horizontal axes labeling appear on top.</span></span><br><span class="line">    ax.tick_params(top=<span class="literal">True</span>, bottom=<span class="literal">False</span>,</span><br><span class="line">                   labeltop=<span class="literal">True</span>, labelbottom=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotate the tick labels and set their alignment.</span></span><br><span class="line">    plt.setp(ax.get_xticklabels(), rotation=-<span class="number">30</span>, ha=<span class="string">&quot;right&quot;</span>,</span><br><span class="line">             rotation_mode=<span class="string">&quot;anchor&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Turn spines off and create white grid.</span></span><br><span class="line">    ax.spines[:].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    ax.set_xticks(np.arange(data.shape[<span class="number">1</span>]+<span class="number">1</span>)-<span class="number">.5</span>, minor=<span class="literal">True</span>)</span><br><span class="line">    ax.set_yticks(np.arange(data.shape[<span class="number">0</span>]+<span class="number">1</span>)-<span class="number">.5</span>, minor=<span class="literal">True</span>)</span><br><span class="line">    ax.grid(which=<span class="string">&quot;minor&quot;</span>, color=<span class="string">&quot;w&quot;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.tick_params(which=<span class="string">&quot;minor&quot;</span>, bottom=<span class="literal">False</span>, left=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> im, cbar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">annotate_heatmap</span>(<span class="params">im, data=<span class="literal">None</span>, valfmt=<span class="string">&quot;&#123;x:.2f&#125;&quot;</span>,</span></span><br><span class="line"><span class="params">                     textcolors=(<span class="params"><span class="string">&quot;black&quot;</span>, <span class="string">&quot;white&quot;</span></span>),</span></span><br><span class="line"><span class="params">                     threshold=<span class="literal">None</span>, **textkw</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A function to annotate a heatmap.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    im</span></span><br><span class="line"><span class="string">        The AxesImage to be labeled.</span></span><br><span class="line"><span class="string">    data</span></span><br><span class="line"><span class="string">        Data used to annotate.  If None, the image&#x27;s data is used.  Optional.</span></span><br><span class="line"><span class="string">    valfmt</span></span><br><span class="line"><span class="string">        The format of the annotations inside the heatmap.  This should either</span></span><br><span class="line"><span class="string">        use the string format method, e.g. &quot;$ &#123;x:.2f&#125;&quot;, or be a</span></span><br><span class="line"><span class="string">        `matplotlib.ticker.Formatter`.  Optional.</span></span><br><span class="line"><span class="string">    textcolors</span></span><br><span class="line"><span class="string">        A pair of colors.  The first is used for values below a threshold,</span></span><br><span class="line"><span class="string">        the second for those above.  Optional.</span></span><br><span class="line"><span class="string">    threshold</span></span><br><span class="line"><span class="string">        Value in data units according to which the colors from textcolors are</span></span><br><span class="line"><span class="string">        applied.  If None (the default) uses the middle of the colormap as</span></span><br><span class="line"><span class="string">        separation.  Optional.</span></span><br><span class="line"><span class="string">    **kwargs</span></span><br><span class="line"><span class="string">        All other arguments are forwarded to each call to `text` used to create</span></span><br><span class="line"><span class="string">        the text labels.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, (<span class="built_in">list</span>, np.ndarray)):</span><br><span class="line">        data = im.get_array()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Normalize the threshold to the images color range.</span></span><br><span class="line">    <span class="keyword">if</span> threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        threshold = im.norm(threshold)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        threshold = im.norm(data.<span class="built_in">max</span>())/<span class="number">2.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set default alignment to center, but allow it to be</span></span><br><span class="line">    <span class="comment"># overwritten by textkw.</span></span><br><span class="line">    kw = <span class="built_in">dict</span>(horizontalalignment=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">              verticalalignment=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">    kw.update(textkw)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the formatter in case a string is supplied</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(valfmt, <span class="built_in">str</span>):</span><br><span class="line">        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop over the data and create a `Text` for each &quot;pixel&quot;.</span></span><br><span class="line">    <span class="comment"># Change the text&#x27;s color depending on the data.</span></span><br><span class="line">    texts = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">1</span>]):</span><br><span class="line">            kw.update(color=textcolors[<span class="built_in">int</span>(im.norm(data[i, j]) &gt; threshold)])</span><br><span class="line">            text = im.axes.text(j, i, valfmt(data[i, j], <span class="literal">None</span>),fontsize = <span class="number">20</span>, **kw)</span><br><span class="line">            texts.append(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> texts</span><br></pre></td></tr></table></figure><p>数据代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每行的数据名</span></span><br><span class="line">vegetables = [<span class="string">&quot;cucumber&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&quot;lettuce&quot;</span>, <span class="string">&quot;asparagus&quot;</span>,</span><br><span class="line">              <span class="string">&quot;potato&quot;</span>, <span class="string">&quot;wheat&quot;</span>, <span class="string">&quot;barley&quot;</span>]</span><br><span class="line"><span class="comment"># 每列的数据名</span></span><br><span class="line">farmers = [<span class="string">&quot;Farmer Joe&quot;</span>, <span class="string">&quot;Upland Bros.&quot;</span>, <span class="string">&quot;Smith Gardening&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Agrifun&quot;</span>, <span class="string">&quot;Organiculture&quot;</span>, <span class="string">&quot;BioGoods Ltd.&quot;</span>, <span class="string">&quot;Cornylee Corp.&quot;</span>]</span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">harvest = np.array([[<span class="number">0.8</span>, <span class="number">2.4</span>, <span class="number">2.5</span>, <span class="number">3.9</span>, <span class="number">0.0</span>, <span class="number">4.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">2.4</span>, <span class="number">0.0</span>, <span class="number">4.0</span>, <span class="number">1.0</span>, <span class="number">2.7</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">1.1</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">4.3</span>, <span class="number">1.9</span>, <span class="number">4.4</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">0.6</span>, <span class="number">0.0</span>, <span class="number">0.3</span>, <span class="number">0.0</span>, <span class="number">3.1</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">0.7</span>, <span class="number">1.7</span>, <span class="number">0.6</span>, <span class="number">2.6</span>, <span class="number">2.2</span>, <span class="number">6.2</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">1.3</span>, <span class="number">1.2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">3.2</span>, <span class="number">5.1</span>],</span><br><span class="line">                    [<span class="number">0.1</span>, <span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">1.4</span>, <span class="number">0.0</span>, <span class="number">1.9</span>, <span class="number">6.3</span>]])</span><br></pre></td></tr></table></figure><p><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401311509035.png" alt=""></p><h2 id="3D条形图">3D条形图</h2><p>数据格式与数据导入方式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将DataFrame的列转换为列表</span></span><br><span class="line">hours = df_mean[<span class="string">&#x27;hour&#x27;</span>].tolist()</span><br><span class="line">months = df_mean[<span class="string">&#x27;month&#x27;</span>].tolist()</span><br><span class="line">irradiance = df_mean[<span class="string">&#x27;Gh [Wh/m2]&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的数据列表</span></span><br><span class="line">data = [[hours[i], months[i], irradiance[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hours))]</span><br><span class="line"></span><br><span class="line">hours_index = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]</span><br><span class="line">months_index = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>)]</span><br><span class="line"><span class="built_in">print</span>(radiation_sums)</span><br></pre></td></tr></table></figure><p>可以用pyecharts画图,但是没有阴影,为了阴影效果,使用js来画:</p><p><a href="https://echarts.apache.org/examples/zh/index.html#chart-type-bar3D">echarts链接</a></p><p>用js画图,数据需要直接写出来,为了方便复制,下面提供一种把数据写入到txt文件的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把hours_index 放到一个txt文件中：</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/hours_index.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(hours_index))</span><br><span class="line"><span class="comment"># 把data按照原格式放到一个txt文件中,保留[]：</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/data.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        f.write(<span class="built_in">str</span>(data[i])+<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>画图代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prettier-ignore</span></span><br><span class="line"><span class="keyword">var</span> days = [<span class="string">&#x27;12a&#x27;</span>, <span class="string">&#x27;1a&#x27;</span>, <span class="string">&#x27;2a&#x27;</span>, <span class="string">&#x27;3a&#x27;</span>, <span class="string">&#x27;4a&#x27;</span>, <span class="string">&#x27;5a&#x27;</span>, <span class="string">&#x27;6a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7a&#x27;</span>, <span class="string">&#x27;8a&#x27;</span>, <span class="string">&#x27;9a&#x27;</span>, <span class="string">&#x27;10a&#x27;</span>, <span class="string">&#x27;11a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;12p&#x27;</span>, <span class="string">&#x27;1p&#x27;</span>, <span class="string">&#x27;2p&#x27;</span>, <span class="string">&#x27;3p&#x27;</span>, <span class="string">&#x27;4p&#x27;</span>, <span class="string">&#x27;5p&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6p&#x27;</span>, <span class="string">&#x27;7p&#x27;</span>, <span class="string">&#x27;8p&#x27;</span>, <span class="string">&#x27;9p&#x27;</span>, <span class="string">&#x27;10p&#x27;</span>, <span class="string">&#x27;11p&#x27;</span>];</span><br><span class="line"><span class="comment">// prettier-ignore</span></span><br><span class="line"><span class="keyword">var</span> hours = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>];</span><br><span class="line"><span class="comment">// prettier-ignore</span></span><br><span class="line"><span class="keyword">var</span> data = [[]]<span class="comment">//太长了,隐去</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;#9CBB89&#x27;</span>,<span class="string">&#x27;#769464&#x27;</span>,<span class="string">&#x27;#526F41&#x27;</span>,<span class="string">&#x27;#2F4C21&#x27;</span>,<span class="string">&#x27;#102B00&#x27;</span>]</span><br><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">visualMap</span>: &#123;</span><br><span class="line">    <span class="attr">max</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">inRange</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: [<span class="string">&#x27;#9CBB89&#x27;</span>,<span class="string">&#x27;#769464&#x27;</span>,<span class="string">&#x27;#526F41&#x27;</span>,<span class="string">&#x27;#2F4C21&#x27;</span>,<span class="string">&#x27;#102B00&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis3D</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: hours</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis3D</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: days</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zAxis3D</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">grid3D</span>: &#123;</span><br><span class="line">    <span class="attr">boxWidth</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">boxDepth</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">viewControl</span>: &#123;</span><br><span class="line">      <span class="comment">// projection: &#x27;orthographic&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">light</span>: &#123;</span><br><span class="line">      <span class="attr">main</span>: &#123;</span><br><span class="line">        <span class="attr">intensity</span>: <span class="number">1.2</span>,</span><br><span class="line">        <span class="attr">shadow</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">ambient</span>: &#123;</span><br><span class="line">        <span class="attr">intensity</span>: <span class="number">0.3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;bar3D&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: data.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: [item[<span class="number">1</span>], item[<span class="number">0</span>], item[<span class="number">2</span>]]</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">shading</span>: <span class="string">&#x27;lambert&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">borderWidth</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">emphasis</span>: &#123;</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#900&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;#900&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401311639503.png" alt=""></p><h2 id="色系表">色系表</h2><table><thead><tr><th>色系</th><th>颜色1</th><th>颜色2</th><th>颜色3</th><th>颜色4</th><th>颜色5</th></tr></thead><tbody><tr><td>灰色系</td><td><span style="color:#353C3E">#353C3E</span></td><td><span style="color:#7A7579">#7A7579</span></td><td><span style="color:#A59B95">#A59B95</span></td><td><span style="color:#DDD7D3">#DDD7D3</span></td><td><span style="color:#EFEDEC">#EFEDEC</span></td></tr><tr><td>红色系</td><td><span style="color:#7E3527">#7E3527</span></td><td><span style="color:#A44A44">#A44A44</span></td><td><span style="color:#9B593E">#9B593E</span></td><td><span style="color:#B47C74">#B47C74</span></td><td><span style="color:#D0B4A9">#D0B4A9</span></td></tr><tr><td>绿色系</td><td><span style="color:#535952">#535952</span></td><td><span style="color:#616153">#616153</span></td><td><span style="color:#7F8D7B">#7F8D7B</span></td><td><span style="color:#9AA193">#9AA193</span></td><td><span style="color:#CADABD">#CADABD</span></td></tr><tr><td>紫色系</td><td><span style="color:#723E58">#723E58</span></td><td><span style="color:#8F7EAB">#8F7EAB</span></td><td><span style="color:#8A7B93">#8A7B93</span></td><td><span style="color:#A38FA3">#A38FA3</span></td><td><span style="color:#D8D1E1">#D8D1E1</span></td></tr><tr><td>粉色系</td><td><span style="color:#D59DA5">#D59DA5</span></td><td><span style="color:#CDA59E">#CDA59E</span></td><td><span style="color:#D5ACBE">#D5ACBE</span></td><td><span style="color:#E8C2DB">#E8C2DB</span></td><td><span style="color:#F1DADB">#F1DADB</span></td></tr><tr><td>蓝色系</td><td><span style="color:#475169">#475169</span></td><td><span style="color:#4B5C74">#4B5C74</span></td><td><span style="color:#7D90A5">#7D90A5</span></td><td><span style="color:#A1B2CC">#A1B2CC</span></td><td><span style="color:#C6CEE2">#C6CEE2</span></td></tr><tr><td>褐色系</td><td><span style="color:#8E6A49">#8E6A49</span></td><td><span style="color:#9F814E">#9F814E</span></td><td><span style="color:#BCA272">#BCA272</span></td><td><span style="color:#D1BFAC">#D1BFAC</span></td><td><span style="color:#E5CFBE">#E5CFBE</span></td></tr><tr><td>黄色系</td><td><span style="color:#AB845E">#AB845E</span></td><td><span style="color:#D3AE5B">#D3AE5B</span></td><td><span style="color:#CDB97D">#CDB97D</span></td><td><span style="color:#EEECC3">#EEECC3</span></td><td><span style="color:#FBEEDE">#FBEEDE</span></td></tr><tr><td>橙色系</td><td><span style="color:#AF665A">#AF665A</span></td><td><span style="color:#D3A56E">#D3A56E</span></td><td><span style="color:#CB9C7A">#CB9C7A</span></td><td><span style="color:#E0C9B1">#E0C9B1</span></td><td><span style="color:#E7DFD7">#E7DFD7</span></td></tr></tbody></table><table><thead><tr><th>色系</th><th>颜色1</th><th>颜色2</th><th>颜色3</th><th>颜色4</th><th>颜色5</th></tr></thead><tbody><tr><td>粉色</td><td><span style="color:#CF948E">#CF948E</span></td><td><span style="color:#DE7E81">#DE7E81</span></td><td><span style="color:#F5C6C6">#F5C6C6</span></td><td><span style="color:#F2B3CA">#F2B3CA</span></td><td><span style="color:#F0C9D6">#F0C9D6</span></td></tr><tr><td>紫色</td><td><span style="color:#A1608C">#A1608C</span></td><td><span style="color:#9B6F89">#9B6F89</span></td><td><span style="color:#D9BCD6">#D9BCD6</span></td><td><span style="color:#E8E3EC">#E8E3EC</span></td><td><span style="color:#EDEDEE">#EDEDEE</span></td></tr><tr><td>蓝色</td><td><span style="color:#709ED0">#709ED0</span></td><td><span style="color:#ACBEDD">#ACBEDD</span></td><td><span style="color:#C6CCDF">#C6CCDF</span></td><td><span style="color:#DFE2E3">#DFE2E3</span></td><td><span style="color:#EFF2F7">#EFF2F7</span></td></tr><tr><td>靛色</td><td><span style="color:#3C979F">#3C979F</span></td><td><span style="color:#A7D0D8">#A7D0D8</span></td><td><span style="color:#75A5B8">#75A5B8</span></td><td><span style="color:#ABCCDD">#ABCCDD</span></td><td><span style="color:#DBE1F0">#DBE1F0</span></td></tr><tr><td>绿色</td><td><span style="color:#416F5D">#416F5D</span></td><td><span style="color:#638262">#638262</span></td><td><span style="color:#628D3D">#628D3D</span></td><td><span style="color:#96B23C">#96B23C</span></td><td><span style="color:#9CBB89">#9CBB89</span></td></tr><tr><td>桃棕色</td><td><span style="color:#C64E2F">#C64E2F</span></td><td><span style="color:#C86A58">#C86A58</span></td><td><span style="color:#C46F4D">#C46F4D</span></td><td><span style="color:#CA8F7A">#CA8F7A</span></td><td><span style="color:#F0C9BA">#F0C9BA</span></td></tr><tr><td>红橙色</td><td><span style="color:#991B27">#991B27</span></td><td><span style="color:#BD2630">#BD2630</span></td><td><span style="color:#E64F25">#E64F25</span></td><td><span style="color:#ED884C">#ED884C</span></td><td><span style="color:#F1A183">#F1A183</span></td></tr><tr><td>现代色</td><td><span style="color:#7083A6">#7083A6</span></td><td><span style="color:#ADC0DA">#ADC0DA</span></td><td><span style="color:#954B63">#954B63</span></td><td><span style="color:#E094B2">#E094B2</span></td><td><span style="color:#EEACCB">#EEACCB</span></td></tr></tbody></table><h2 id="地图">地图</h2><p>地图主要使用folium包绘制</p><p>导包代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> webbrowser <span class="keyword">as</span> wb</span><br><span class="line"><span class="keyword">from</span> folium.plugins <span class="keyword">import</span> HeatMap</span><br><span class="line"><span class="keyword">from</span> folium.plugins <span class="keyword">import</span> MarkerCluster</span><br></pre></td></tr></table></figure><p>读取数据,初始化地图:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">archive = pd.read_csv(<span class="string">&#x27;../data/dataset_of_vctria.csv&#x27;</span>)</span><br><span class="line">latitudes = archive[<span class="string">&#x27;latitude&#x27;</span>].head(<span class="number">3000</span>)</span><br><span class="line">longitudes = archive[<span class="string">&#x27;longitude&#x27;</span>].head(<span class="number">3000</span>)</span><br><span class="line">m = folium.Map(location = [np.mean(latitudes),np.mean(longitudes)],</span><br><span class="line">               width = <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">               height = <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">               zoom_start = <span class="number">5</span>,<span class="comment">#缩放比例</span></span><br><span class="line">               min_zoom = <span class="number">0</span>,</span><br><span class="line">               max_zoom=<span class="number">18</span>,</span><br><span class="line">               tiles=<span class="string">&#x27;OpenStreetMap&#x27;</span>,</span><br><span class="line">               attr = <span class="string">&#x27;高德地图&#x27;</span></span><br><span class="line">              )</span><br><span class="line">m.add_child(folium.LatLngPopup()) <span class="comment"># 点击显示经纬度</span></span><br><span class="line"><span class="comment"># 经纬度数据:</span></span><br><span class="line">heat_data = [[row[<span class="string">&#x27;latitude&#x27;</span>],row[<span class="string">&#x27;longitude&#x27;</span>]] <span class="keyword">for</span> index,row <span class="keyword">in</span> archive.iterrows()] <span class="comment"># 热力图数据:经纬度</span></span><br></pre></td></tr></table></figure><p>画圈函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pointpoint</span>(<span class="params">m,latitude,longitude</span>):</span><br><span class="line">    point = folium.<span class="built_in">map</span>.FeatureGroup()</span><br><span class="line">    <span class="keyword">for</span> lat,lon <span class="keyword">in</span> <span class="built_in">zip</span>(latitude,longitude):</span><br><span class="line">        point.add_child(</span><br><span class="line">            folium.CircleMarker(</span><br><span class="line">                [lat,lon],</span><br><span class="line">                radius = <span class="number">2</span>,</span><br><span class="line">                color = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                fill = <span class="literal">True</span>,</span><br><span class="line">                fill_color = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                fill_opacity = <span class="number">1</span>,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    m.add_child(point)</span><br></pre></td></tr></table></figure><p>栅格化函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">grid_func</span>(<span class="params">latitude_start,longitude_start,latitude_size,longitude_size,latitude_num,longitude_num,color,alpha,m</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(longitude_num)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(latitude_num)):</span><br><span class="line">            folium.Polygon(</span><br><span class="line">                [</span><br><span class="line">                    [latitude_start +latitude_size*j,longitude_start +i*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*j,longitude_start +(i+<span class="number">1</span>)*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*(j+<span class="number">1</span>),longitude_start +(i+<span class="number">1</span>)*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*(j+<span class="number">1</span>),longitude_start +i*longitude_size],</span><br><span class="line">                ],</span><br><span class="line">                color = color,weight=<span class="number">1</span>,fill=<span class="literal">True</span>,fill_color=color,fill_opacity=alpha,</span><br><span class="line">            ).add_to(m)</span><br></pre></td></tr></table></figure><p>找到格子左下角坐标的函数(用于后续给格子填色)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到格子左下角坐标的函数:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_left_down</span>(<span class="params">latitude_start,longitude_start,latitude_size,longitude_size,latitude_grid,longitude_grid</span>):</span><br><span class="line">    <span class="keyword">return</span> [latitude_start +((latitude_grid-latitude_start)//latitude_size)*latitude_size,longitude_start +((longitude_grid-longitude_start)//longitude_size)*longitude_size]</span><br><span class="line"><span class="comment"># 比如,我现在想找到(-38.0049,142.9323)的格子左下角坐标:</span></span><br><span class="line">find_left_down(latitude_start,longitude_start,latitude_size,longitude_size,-<span class="number">38.0049</span>,<span class="number">142.9323</span>)</span><br><span class="line"><span class="comment"># 验证成功</span></span><br><span class="line">m</span><br></pre></td></tr></table></figure><p>格子填色函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合这个函数,找到了需要染色的格子的左下标,就可以开始给格子染色了:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">color_grid</span>(<span class="params">latitude_start,longitude_start,latitude_size,longitude_size,latitude_num,longitude_num,archive,color,m</span>):</span><br><span class="line">    <span class="keyword">for</span> index,row <span class="keyword">in</span> archive.iterrows():</span><br><span class="line">        latitude = row[<span class="string">&#x27;latitude&#x27;</span>]</span><br><span class="line">        longitude = row[<span class="string">&#x27;longitude&#x27;</span>]</span><br><span class="line">        <span class="comment"># 找到格子左下角坐标</span></span><br><span class="line">        left_down = find_left_down(latitude_start,longitude_start,latitude_size,longitude_size,latitude,longitude)</span><br><span class="line">        <span class="comment"># 染色</span></span><br><span class="line">        folium.Polygon(</span><br><span class="line">            [</span><br><span class="line">                left_down,</span><br><span class="line">                [left_down[<span class="number">0</span>],left_down[<span class="number">1</span>]+longitude_size],</span><br><span class="line">                [left_down[<span class="number">0</span>]+latitude_size,left_down[<span class="number">1</span>]+longitude_size],</span><br><span class="line">                [left_down[<span class="number">0</span>]+latitude_size,left_down[<span class="number">1</span>]],</span><br><span class="line">            ],</span><br><span class="line">            color = color,weight=<span class="number">1</span>,fill=<span class="literal">True</span>,fill_color=color,fill_opacity=<span class="number">0.5</span>,</span><br><span class="line">        ).add_to(m)</span><br><span class="line"><span class="comment"># Latitude: -38.0022,Longitude: 142.9356</span></span><br><span class="line">color_start = [-<span class="number">38.0022</span>,<span class="number">142.9356</span>]</span><br><span class="line">color_end = [-<span class="number">37.3880</span>,<span class="number">142.9356</span>]</span><br><span class="line"><span class="comment"># 把需要染色的格子写成一个DataFrame:</span></span><br><span class="line">grid = pd.DataFrame(columns=[<span class="string">&#x27;latitude&#x27;</span>,<span class="string">&#x27;longitude&#x27;</span>])</span><br><span class="line">grid[<span class="string">&#x27;latitude&#x27;</span>] = [i <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(color_start[<span class="number">0</span>],color_end[<span class="number">0</span>],latitude_size)]</span><br><span class="line">grid[<span class="string">&#x27;longitude&#x27;</span>] = [color_start[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(color_start[<span class="number">0</span>],color_end[<span class="number">0</span>],latitude_size)]</span><br></pre></td></tr></table></figure><p>热力图代码:<br>画热力图需要先获得包含经纬度的数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经纬度数据:</span></span><br><span class="line">heat_data = [[row[<span class="string">&#x27;latitude&#x27;</span>],row[<span class="string">&#x27;longitude&#x27;</span>]] <span class="keyword">for</span> index,row <span class="keyword">in</span> archive.iterrows()] <span class="comment"># 热力图数据:经纬度</span></span><br><span class="line">heat_data = [[row[<span class="string">&#x27;latitude&#x27;</span>],row[<span class="string">&#x27;longitude&#x27;</span>]] <span class="keyword">for</span> index,row <span class="keyword">in</span> archive.iterrows()]</span><br><span class="line">HeatMap(heat_data,radius=<span class="number">30</span>).add_to(m)</span><br></pre></td></tr></table></figure><p>画标记:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">folium.Marker(</span><br><span class="line">    location=[-<span class="number">37.3578</span>,<span class="number">143.2346</span>],</span><br><span class="line">    popup=<span class="string">&quot;Marker&quot;</span>,</span><br><span class="line">    icon = folium.Icon(icon = <span class="string">&#x27;leaf&#x27;</span>,color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">).add_to(m)</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401311326416.png" alt=""></p><h2 id="网络图">网络图</h2><p>网络图一般用Gephi来绘制</p><p>需要的数据类型为csv文件,一列为source(起点),一列为target(起点到达的点),一列为weight(边权重).</p><p>例如:<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets202401311644906.png" alt=""></p><p>Gephi教程视频:<br><a href="https://www.bilibili.com/video/BV1dL4y1H76g/?spm_id_from=333.337.search-card.all.click&amp;vd_source=67219ae74a163427f28618146ba99a28">Gephi教程视频</a></p><h2 id="AxGlyph">AxGlyph</h2><p>AxGlyph可以用来绘制一系列的示意图和物理图</p><p><a href="https://www.bilibili.com/video/BV1zz4y1f7wN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=67219ae74a163427f28618146ba99a28">AxGlyph教程视频</a></p><h2 id="Visio">Visio</h2><p><a href="https://zhuanlan.zhihu.com/p/277423824">Visio快捷键</a></p><h2 id="常用网站">常用网站</h2><p><a href="https://pyecharts.org/#/zh-cn/intro">pyecharts</a></p><p><a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/curve_error_band.html">matplotlib</a></p><p><a href="https://www.iconfont.cn/">阿里图标</a></p><p><a href="https://mycolor.space/?hex=%23435CDE&amp;sub=1">ColorSpace</a></p><p><a href="https://python-visualization.github.io/folium/latest/getting_started.html">folium</a></p>]]></content>
    
    
    <summary type="html">美赛绘图的基本配置与代码</summary>
    
    
    
    <category term="美赛" scheme="https://hitszzhoujy.com/categories/%E7%BE%8E%E8%B5%9B/"/>
    
    
    <category term="美赛" scheme="https://hitszzhoujy.com/tags/%E7%BE%8E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>数模总结</title>
    <link href="https://hitszzhoujy.com/posts/528198f4.html"/>
    <id>https://hitszzhoujy.com/posts/528198f4.html</id>
    <published>2024-01-21T14:21:02.000Z</published>
    <updated>2024-01-30T13:39:03.480Z</updated>
    
    <content type="html"><![CDATA[<h1>数据处理</h1><h2 id="遍历每一个文件夹">遍历每一个文件夹</h2><h3 id="把处理后的数据放在原文件夹">把处理后的数据放在原文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建一个空的DataFrame，用于存储所有txt文件的数据</span></span><br><span class="line">final_df = pd.DataFrame()</span><br><span class="line"><span class="comment"># 指定包含txt文件的文件夹路径</span></span><br><span class="line">txt_folder = <span class="string">&#x27;data/参考数据集/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹中的每个txt文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subdir <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    subpath = os.path.join(txt_folder,<span class="built_in">str</span>(subdir))</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subpath):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">            txt_file_path = os.path.join(subpath,filename)</span><br><span class="line">            data_np = np.loadtxt(txt_file_path)</span><br><span class="line">            data_np = data_np.T</span><br><span class="line">            data_df = pd.DataFrame(data_np)</span><br><span class="line">            data_df.to_excel(txt_file_path.replace(<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.xlsx&#x27;</span>), index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据已导入到Excel文件&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="把数据按照原逻辑放在一个新文件夹">把数据按照原逻辑放在一个新文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定基础文件夹路径</span></span><br><span class="line">base_folder = <span class="string">&#x27;data/参考数据集/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的文件夹用于存放处理后的Excel文件</span></span><br><span class="line">clean_folder = <span class="string">&#x27;data/clean/参考数据集/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(clean_folder):</span><br><span class="line">    os.makedirs(clean_folder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历基础文件夹中的子文件夹</span></span><br><span class="line"><span class="keyword">for</span> subdir <span class="keyword">in</span> os.listdir(base_folder):</span><br><span class="line">    subdir_path = os.path.join(base_folder, subdir)</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(subdir_path):</span><br><span class="line">        <span class="comment"># 创建一个新的子文件夹用于存放处理后的Excel文件</span></span><br><span class="line">        new_subfolder = os.path.join(clean_folder, subdir)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_subfolder):</span><br><span class="line">            os.makedirs(new_subfolder)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历当前子文件夹中的txt文件</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subdir_path):</span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">                txt_file_path = os.path.join(subdir_path, filename)</span><br><span class="line">                data_np = np.loadtxt(txt_file_path)</span><br><span class="line">                data_np = data_np.T</span><br><span class="line">                data_df = pd.DataFrame(data_np)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 生成新的Excel文件路径，存放在新的子文件夹中</span></span><br><span class="line">                new_excel_path = os.path.join(new_subfolder, filename.replace(<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;A_new.xlsx&#x27;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将DataFrame保存为Excel文件</span></span><br><span class="line">                data_df.to_excel(new_excel_path, sheet_name=<span class="string">&#x27;A&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据已导入到Excel文件，并按照原文件夹逻辑存放在新的文件夹中&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="pandas专区">pandas专区</h2><h2 id="numpy专区">numpy专区</h2><h3 id="random-random-和random-randn-的区别">random.random()和random.randn()的区别</h3><p>numpy.random.randn 是 NumPy 库中用于生成服从标准正态分布（均值为0，标准差为1）的随机数的函数。它返回一个具有指定形状的数组，数组中的元素是独立且服从标准正态分布的随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成形状为 (3, 3) 的标准正态分布随机数组</span></span><br><span class="line">random_array = np.random.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>相比之下，random.random 是 Python 内置的 random 模块中用于生成0到1之间均匀分布的随机数的函数。它返回一个浮点数，该浮点数位于半开区间 [0.0, 1.0)内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 生成0到1之间的均匀分布的随机数</span></span><br><span class="line">random_number = random.random()</span><br></pre></td></tr></table></figure><h1>画图</h1><h2 id="配色">配色</h2><h3 id="单线">单线</h3><table><thead><tr><th>颜色</th><th>线</th><th>填充</th></tr></thead><tbody><tr><td>橙</td><td>#F0CC53</td><td>#FFC66B</td></tr></tbody></table><h3 id="两线">两线</h3><table><thead><tr><th>颜色</th><th></th><th></th></tr></thead><tbody><tr><td>橙</td><td>#F0CC53</td><td>#F0CC53</td></tr></tbody></table><h3 id="三线">三线</h3><table><thead><tr><th>颜色</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>橙</td><td>#F0CC53</td><td>#00C9EF</td><td>#00C9EF</td></tr></tbody></table><h2 id="模板">模板</h2><h3 id="基本配置">基本配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="comment"># 设置全局字体为Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line"><span class="comment"># 设置字号为12pt</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">12</span></span><br><span class="line"><span class="comment"># 清晰</span></span><br><span class="line">%config InlineBackend.figure_format = <span class="string">&#x27;retina&#x27;</span></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h3 id="堆叠图模板">堆叠图模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line">colors=[<span class="string">&#x27;#F0CC53&#x27;</span>,<span class="string">&#x27;#FF63A9&#x27;</span>]</span><br><span class="line">population = population[::-<span class="number">1</span>]</span><br><span class="line">fig ,ax= plt.subplots(figsize=(<span class="number">16</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">ax.stackplot(population[<span class="string">&#x27;年份&#x27;</span>],population[<span class="string">&#x27;乡村人口(万人)&#x27;</span>],population[<span class="string">&#x27;城镇人口(万人)&#x27;</span>],labels=[<span class="string">&#x27;Rural Population&#x27;</span>,<span class="string">&#x27;Urban Population&#x27;</span>],colors=colors,alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(population[<span class="string">&#x27;年份&#x27;</span>],population[<span class="string">&#x27;年末总人口(万人)&#x27;</span>],<span class="string">&#x27;o&#x27;</span>,ls=<span class="string">&#x27;-&#x27;</span>,color=colors[<span class="number">1</span>],linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(population[<span class="string">&#x27;年份&#x27;</span>],population[<span class="string">&#x27;乡村人口(万人)&#x27;</span>],<span class="string">&#x27;o&#x27;</span>,ls=<span class="string">&#x27;-&#x27;</span>,color=colors[<span class="number">0</span>],linewidth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;population ($1 \\times 10^4$)&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Year&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">ax.grid()</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">200000</span>)</span><br><span class="line">ax.xaxis.set_major_locator(ticker.MaxNLocator(integer=<span class="literal">True</span>))</span><br><span class="line">ax.xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="线性图">线性图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线形图样板图</span></span><br><span class="line"><span class="comment"># 第0维为线颜色,第1维为填充</span></span><br><span class="line">colors = [<span class="string">&#x27;#F0CC53&#x27;</span>,<span class="string">&#x27;#FFC66B&#x27;</span>]</span><br><span class="line">fig,ax=plt.subplots(figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ax.plot(population[<span class="string">&#x27;年份&#x27;</span>],population[<span class="string">&#x27;年末总人口(万人)&#x27;</span>],<span class="string">&#x27;o&#x27;</span>,ls=<span class="string">&#x27;-&#x27;</span>,color=colors[<span class="number">0</span>],linewidth=<span class="number">3</span>,label = <span class="string">&#x27;population&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">ax.fill_between(population[<span class="string">&#x27;年份&#x27;</span>],<span class="number">0</span>,population[<span class="string">&#x27;年末总人口(万人)&#x27;</span>],color=colors[<span class="number">1</span>],alpha=<span class="number">0.3</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Year&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;population ($1 \\times 10^4$)&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">ax.grid()</span><br><span class="line">ax.set_ylim(<span class="number">120000</span>,<span class="number">150000</span>)</span><br><span class="line">ax.xaxis.set_major_locator(ticker.MaxNLocator(integer=<span class="literal">True</span>))</span><br><span class="line">ax.xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="散点图">散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="comment"># 设置全局字体为Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line"><span class="comment"># 设置字号为12pt</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">18</span></span><br><span class="line"><span class="comment"># 清晰</span></span><br><span class="line">%config InlineBackend.figure_format = <span class="string">&#x27;retina&#x27;</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画Bland-Altman图</span></span><br><span class="line"><span class="comment"># 设置画布大小</span></span><br><span class="line">fig , ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">colors=[<span class="string">&#x27;#86AA2D&#x27;</span>,<span class="string">&#x27;#E45C64&#x27;</span>,<span class="string">&#x27;#B98600&#x27;</span>,<span class="string">&#x27;#5B9BD5&#x27;</span>]</span><br><span class="line">ax.plot(AQI[<span class="string">&#x27;Date&#x27;</span>], AQI[<span class="string">&#x27;AQI&#x27;</span>], <span class="string">&#x27;o&#x27;</span>, color=colors[<span class="number">0</span>], markersize=<span class="number">4</span>,alpha=<span class="number">0.6</span>,label=<span class="string">&#x27;AQI&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y轴坐标名称为:AQI分布的英文名称</span></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;AQI&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Date&#x27;</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">mean = <span class="number">50.5368</span></span><br><span class="line"><span class="comment"># 可信下界</span></span><br><span class="line">lowb= <span class="number">10.5847</span></span><br><span class="line"><span class="comment"># 可信上界</span></span><br><span class="line">upb= <span class="number">90.4888</span></span><br><span class="line"><span class="comment"># 检验结果：</span></span><br><span class="line">ans = <span class="number">0.9545</span></span><br><span class="line"><span class="comment"># 画出三条平行于x轴的直线</span></span><br><span class="line">ax.axhline(y=mean, color=colors[<span class="number">1</span>], linestyle=<span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;Mean&#x27;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">ax.axhline(y=lowb, color=colors[<span class="number">2</span>], linestyle=<span class="string">&#x27;--&#x27;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">ax.axhline(y=upb, color=colors[<span class="number">3</span>], linestyle=<span class="string">&#x27;--&#x27;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="string">&#x27;%Y-%m&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴的日期间隔，这里设置为每3个月</span></span><br><span class="line">ax.xaxis.set_major_locator(mdates.MonthLocator(interval=<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ax.xaxis.set_major_locator(ticker.MaxNLocator(integer=True))</span></span><br><span class="line"><span class="comment"># ax.xaxis.set_major_locator(ticker.MultipleLocator(1))</span></span><br><span class="line"><span class="comment"># 把整个图的背景填充为蓝色</span></span><br><span class="line">ax.set_facecolor(<span class="string">&#x27;#E0E0E0&#x27;</span>)</span><br><span class="line">ax.legend()</span><br></pre></td></tr></table></figure><h3 id="热力图">热力图</h3><h1>首先给出两个函数,可以辅助我们画图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heatmap</span>(<span class="params">data, row_labels, col_labels, ax=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">            cbar_kw=<span class="literal">None</span>, cbarlabel=<span class="string">&quot;&quot;</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a heatmap from a numpy array and two lists of labels.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    data</span></span><br><span class="line"><span class="string">        A 2D numpy array of shape (M, N).</span></span><br><span class="line"><span class="string">    row_labels</span></span><br><span class="line"><span class="string">        A list or array of length M with the labels for the rows.</span></span><br><span class="line"><span class="string">    col_labels</span></span><br><span class="line"><span class="string">        A list or array of length N with the labels for the columns.</span></span><br><span class="line"><span class="string">    ax</span></span><br><span class="line"><span class="string">        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If</span></span><br><span class="line"><span class="string">        not provided, use current axes or create a new one.  Optional.</span></span><br><span class="line"><span class="string">    cbar_kw</span></span><br><span class="line"><span class="string">        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.</span></span><br><span class="line"><span class="string">    cbarlabel</span></span><br><span class="line"><span class="string">        The label for the colorbar.  Optional.</span></span><br><span class="line"><span class="string">    **kwargs</span></span><br><span class="line"><span class="string">        All other arguments are forwarded to `imshow`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ax <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        ax = plt.gca()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cbar_kw <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        cbar_kw = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot the heatmap</span></span><br><span class="line">    im = ax.imshow(data, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create colorbar</span></span><br><span class="line">    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)</span><br><span class="line">    cbar.ax.set_ylabel(cbarlabel, rotation=-<span class="number">90</span>, va=<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Show all ticks and label them with the respective list entries.</span></span><br><span class="line">    ax.set_xticks(np.arange(data.shape[<span class="number">1</span>]), labels=col_labels)</span><br><span class="line">    ax.set_yticks(np.arange(data.shape[<span class="number">0</span>]), labels=row_labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let the horizontal axes labeling appear on top.</span></span><br><span class="line">    ax.tick_params(top=<span class="literal">True</span>, bottom=<span class="literal">False</span>,</span><br><span class="line">                   labeltop=<span class="literal">True</span>, labelbottom=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotate the tick labels and set their alignment.</span></span><br><span class="line">    plt.setp(ax.get_xticklabels(), rotation=-<span class="number">30</span>, ha=<span class="string">&quot;right&quot;</span>,</span><br><span class="line">             rotation_mode=<span class="string">&quot;anchor&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Turn spines off and create white grid.</span></span><br><span class="line">    ax.spines[:].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    ax.set_xticks(np.arange(data.shape[<span class="number">1</span>]+<span class="number">1</span>)-<span class="number">.5</span>, minor=<span class="literal">True</span>)</span><br><span class="line">    ax.set_yticks(np.arange(data.shape[<span class="number">0</span>]+<span class="number">1</span>)-<span class="number">.5</span>, minor=<span class="literal">True</span>)</span><br><span class="line">    ax.grid(which=<span class="string">&quot;minor&quot;</span>, color=<span class="string">&quot;w&quot;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.tick_params(which=<span class="string">&quot;minor&quot;</span>, bottom=<span class="literal">False</span>, left=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> im, cbar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">annotate_heatmap</span>(<span class="params">im, data=<span class="literal">None</span>, valfmt=<span class="string">&quot;&#123;x:.2f&#125;&quot;</span>,</span></span><br><span class="line"><span class="params">                     textcolors=(<span class="params"><span class="string">&quot;black&quot;</span>, <span class="string">&quot;white&quot;</span></span>),</span></span><br><span class="line"><span class="params">                     threshold=<span class="literal">None</span>, **textkw</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A function to annotate a heatmap.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    im</span></span><br><span class="line"><span class="string">        The AxesImage to be labeled.</span></span><br><span class="line"><span class="string">    data</span></span><br><span class="line"><span class="string">        Data used to annotate.  If None, the image&#x27;s data is used.  Optional.</span></span><br><span class="line"><span class="string">    valfmt</span></span><br><span class="line"><span class="string">        The format of the annotations inside the heatmap.  This should either</span></span><br><span class="line"><span class="string">        use the string format method, e.g. &quot;$ &#123;x:.2f&#125;&quot;, or be a</span></span><br><span class="line"><span class="string">        `matplotlib.ticker.Formatter`.  Optional.</span></span><br><span class="line"><span class="string">    textcolors</span></span><br><span class="line"><span class="string">        A pair of colors.  The first is used for values below a threshold,</span></span><br><span class="line"><span class="string">        the second for those above.  Optional.</span></span><br><span class="line"><span class="string">    threshold</span></span><br><span class="line"><span class="string">        Value in data units according to which the colors from textcolors are</span></span><br><span class="line"><span class="string">        applied.  If None (the default) uses the middle of the colormap as</span></span><br><span class="line"><span class="string">        separation.  Optional.</span></span><br><span class="line"><span class="string">    **kwargs</span></span><br><span class="line"><span class="string">        All other arguments are forwarded to each call to `text` used to create</span></span><br><span class="line"><span class="string">        the text labels.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, (<span class="built_in">list</span>, np.ndarray)):</span><br><span class="line">        data = im.get_array()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Normalize the threshold to the images color range.</span></span><br><span class="line">    <span class="keyword">if</span> threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        threshold = im.norm(threshold)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        threshold = im.norm(data.<span class="built_in">max</span>())/<span class="number">2.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set default alignment to center, but allow it to be</span></span><br><span class="line">    <span class="comment"># overwritten by textkw.</span></span><br><span class="line">    kw = <span class="built_in">dict</span>(horizontalalignment=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">              verticalalignment=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">    kw.update(textkw)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the formatter in case a string is supplied</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(valfmt, <span class="built_in">str</span>):</span><br><span class="line">        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop over the data and create a `Text` for each &quot;pixel&quot;.</span></span><br><span class="line">    <span class="comment"># Change the text&#x27;s color depending on the data.</span></span><br><span class="line">    texts = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">1</span>]):</span><br><span class="line">            kw.update(color=textcolors[<span class="built_in">int</span>(im.norm(data[i, j]) &gt; threshold)])</span><br><span class="line">            text = im.axes.text(j, i, valfmt(data[i, j], <span class="literal">None</span>), **kw)</span><br><span class="line">            texts.append(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> texts</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取一个excel文件,并利用该excel文件画出热力图</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;./heatmap.xlsx&#x27;</span>,index_col=<span class="number">0</span>,header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">im,cbar = heatmap(df.values,df.index,df.columns,ax=ax)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df.index)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df.columns)):</span><br><span class="line">        <span class="comment"># 注意这里的顺序为(j,i),因为第一个参数代表的是x的坐标,也即列的位置</span></span><br><span class="line">        text = ax.text(j,i,<span class="string">&quot;%.2f&quot;</span>%df.values[i,j],</span><br><span class="line">                       ha=<span class="string">&quot;center&quot;</span>,va=<span class="string">&quot;center&quot;</span>,color=<span class="string">&quot;w&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="画地图">画地图</h3><p>画世界人口地图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Map()</span><br><span class="line">    .add(<span class="string">&quot;Population&quot;</span>,[<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(df[<span class="string">&#x27;Country&#x27;</span>],df[<span class="string">&#x27;Population&#x27;</span>])], <span class="string">&quot;world&quot;</span>)</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))<span class="comment">#不显示国家名字</span></span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;Population&quot;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(max_=<span class="number">1500000000</span>),</span><br><span class="line">    )</span><br><span class="line">    .render(<span class="string">&quot;../figure/map_world_population.html&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用folium画地图-且栅格化">用folium画地图,且栅格化</h3><p>第一步先生成一个图:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">m = folium.Map(location = [np.mean(latitudes),np.mean(longitudes)],</span><br><span class="line">               width = <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">               height = <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">               zoom_start = <span class="number">5</span>,<span class="comment">#缩放比例</span></span><br><span class="line">                min_zoom = <span class="number">0</span>,</span><br><span class="line">                max_zoom=<span class="number">18</span>,</span><br><span class="line">                tiles=<span class="string">&#x27;OpenStreetMap&#x27;</span>,</span><br><span class="line">                attr = <span class="string">&#x27;高德地图&#x27;</span></span><br><span class="line">              )</span><br><span class="line">m</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> webbrowser <span class="keyword">as</span> wb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> folium.plugins <span class="keyword">import</span> HeatMap</span><br><span class="line">archive = pd.read_csv(<span class="string">&#x27;dataset_of_vctria.csv&#x27;</span>) <span class="comment"># 导入数据集 （数据集在项目的文件夹下）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取经纬度数据</span></span><br><span class="line">latitude = archive[<span class="string">&#x27;latitude&#x27;</span>].head(<span class="number">30000</span>)</span><br><span class="line">longitude = archive[<span class="string">&#x27;longitude&#x27;</span>].head(<span class="number">30000</span>)</span><br><span class="line"><span class="comment"># 绘制基准地图</span></span><br><span class="line">m = folium.Map(location=[np.mean(latitude), np.mean(longitude)],  <span class="comment">#表示开始时地图的起始位置</span></span><br><span class="line">               width=<span class="string">&#x27;100%&#x27;</span>, <span class="comment">#窗口的宽高限制（此处指打开窗口时占据显示屏的百分比</span></span><br><span class="line">               height=<span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">               zoom_start=<span class="number">5</span>,   <span class="comment">#初始放大倍数</span></span><br><span class="line">               min_zoom=<span class="number">0</span>,    <span class="comment">#最小缩放倍数，由于folium地图控件有良好的交互效果，因此可以进行自由的缩放操作</span></span><br><span class="line">               max_zoom=<span class="number">18</span>,</span><br><span class="line">               tiles=<span class="string">&#x27;OpenStreetMap&#x27;</span>,  <span class="comment">#地图类型</span></span><br><span class="line">               attr=<span class="string">&quot;高德地图&quot;</span>  <span class="comment">#直接用这个就行了，表示的是地图来源</span></span><br><span class="line">               )</span><br><span class="line"></span><br><span class="line"><span class="comment">#在地图上标识出数据点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pointpoint</span>(<span class="params">m, latitude, lontitude</span>):</span><br><span class="line"><span class="comment">#这里创建了一个点集一类的东西用来存储新增加的点</span></span><br><span class="line">    point = folium.<span class="built_in">map</span>.FeatureGroup()</span><br><span class="line">    <span class="keyword">for</span> lat, lon <span class="keyword">in</span> <span class="built_in">zip</span>(latitude, longitude):</span><br><span class="line">        point.add_child(</span><br><span class="line">            folium.CircleMarker(</span><br><span class="line">                (lat, lon),</span><br><span class="line">                radius=<span class="number">2</span>,   <span class="comment"># 圆圈半径</span></span><br><span class="line">                color=<span class="string">&#x27;red&#x27;</span>, <span class="comment"># 半径颜色</span></span><br><span class="line">                fill=<span class="literal">True</span>,     <span class="comment"># 内部填充</span></span><br><span class="line">                fill_color=<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                fill_opacity=<span class="number">1</span>,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    m.add_child(point)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成栅格</span></span><br><span class="line"><span class="comment">#选定起始点 不断生成四方格 由于经度、纬度的增量与距离的转换公式不同 因此需要进行增量的调整，这里为了简便直接取整了</span></span><br><span class="line"><span class="comment">#栅格大小 5km*5km</span></span><br><span class="line"><span class="comment">#生成400个格子</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="comment">#folium.Polygon 函数用来生成封闭的图形，我们需要提供四个顶点的信息</span></span><br><span class="line">    <span class="comment"># 生成方式为向纬度减小方向生成格子，把j前面的+改为-就是向纬度增大方生成格子</span></span><br><span class="line">        folium.Polygon(</span><br><span class="line">            [</span><br><span class="line">                [-<span class="number">38.02</span> + <span class="number">0.04</span> * j, <span class="number">142.91</span> + i * <span class="number">0.05</span>],            <span class="comment"># 第一个参数表示四个顶点，需要画什么图形就打多少个起始点</span></span><br><span class="line">                [-<span class="number">38.02</span> + <span class="number">0.04</span> * j, <span class="number">142.91</span> + (i + <span class="number">1</span>) * <span class="number">0.05</span>],</span><br><span class="line">                [-<span class="number">38.02</span> + <span class="number">0.04</span> * (j + <span class="number">1</span>), <span class="number">142.91</span> + (i + <span class="number">1</span>) * <span class="number">0.05</span>],</span><br><span class="line">                [-<span class="number">38.02</span> + <span class="number">0.04</span> * (j + <span class="number">1</span>), <span class="number">142.91</span> + i * <span class="number">0.05</span>]</span><br><span class="line">            ], color=<span class="string">&#x27;orange&#x27;</span>, weight=<span class="number">1</span>，fill=<span class="literal">True</span>, fill_color=<span class="string">&#x27;blue&#x27;</span>, fill_opacity=<span class="number">0.2</span> <span class="comment"># 后面添加的是 线的颜色，线的粗细，填充与否，填充颜色，透明度</span></span><br><span class="line">        ).add_to(m)                                                <span class="comment"># add_to是将这些生成的图形加入到原图层中</span></span><br><span class="line">m.add_child(folium.LatLngPopup())       <span class="comment"># 这个地图组件是可以通过点击地图在地图上选点的   </span></span><br><span class="line"></span><br><span class="line">m.save(<span class="string">&#x27;../figure/map.html&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时写了一个函数来计算某个方块应该填上什么样的颜色:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">color_func</span>(<span class="params">i,j</span>):</span><br><span class="line">    a = [-<span class="number">38.02</span> +<span class="number">0.04</span>*j,<span class="number">142.91</span> +i*<span class="number">0.05</span>]</span><br><span class="line">    b = [-<span class="number">38.02</span> +<span class="number">0.04</span>*j,<span class="number">142.91</span> +(i+<span class="number">1</span>)*<span class="number">0.05</span>]</span><br><span class="line">    c = [-<span class="number">38.02</span> +<span class="number">0.04</span>*(j+<span class="number">1</span>),<span class="number">142.91</span> +(i+<span class="number">1</span>)*<span class="number">0.05</span>]</span><br><span class="line">    d = [-<span class="number">38.02</span> +<span class="number">0.04</span>*(j+<span class="number">1</span>),<span class="number">142.91</span> +i*<span class="number">0.05</span>]</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">1</span>] &lt; <span class="number">143.0859</span>)&amp;(b[<span class="number">1</span>]&gt;<span class="number">143.0859</span>)&amp;(d[<span class="number">0</span>]&lt;-<span class="number">37.3547</span>)&amp;(b[<span class="number">0</span>]&gt;-<span class="number">37.7605</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure><p>使用的时候,把(-38.02,143.91)替换成与画方块的循环内对应的开始坐标,这个函数是把某一列涂成橙色,其余为蓝色.<br>下面封装一个函数,传入开始坐标,经度方向的大小,纬度方向的大小,经度方向的个数,纬度方向的个数,地图m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成栅格</span></span><br><span class="line"><span class="comment"># 选定起始点 不断生成四方格</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">grid_func</span>(<span class="params">latitude_start,longitude_start,latitude_size,longitude_size,latitude_num,longitude_num,m</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(longitude_num):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(latitude_num):</span><br><span class="line">            folium.Polygon(</span><br><span class="line">                [</span><br><span class="line">                    [latitude_start +latitude_size*j,longitude_start +i*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*j,longitude_start +(i+<span class="number">1</span>)*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*(j+<span class="number">1</span>),longitude_start +(i+<span class="number">1</span>)*longitude_size],</span><br><span class="line">                    [latitude_start +latitude_size*(j+<span class="number">1</span>),longitude_start +i*longitude_size],</span><br><span class="line">                ],</span><br><span class="line">                color = <span class="string">&#x27;orange&#x27;</span>,weight=<span class="number">1</span>,fill=<span class="literal">True</span>,fill_color=<span class="string">&#x27;orange&#x27;</span>,fill_opacity=<span class="number">0.1</span>,</span><br><span class="line">            ).add_to(m)</span><br></pre></td></tr></table></figure><h1>最优化问题</h1><h2 id="gurobi求解器">gurobi求解器</h2><p>gurobi可以用来求解线性和二次型最优问题<br><a href="https://zhuanlan.zhihu.com/p/52371462%25">教程</a></p><h3 id="基本代码框架">基本代码框架:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gurobipy</span><br><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line">MODEL = gurobipy.Model()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建变量</span></span><br><span class="line">X = MODEL.addVar(vtype=gurobipy.GRB.INTEGER,name=<span class="string">&quot;X&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新变量环境</span></span><br><span class="line">MODEL.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目标函数</span></span><br><span class="line">MODEL.setObjective(<span class="string">&#x27;目标函数表达式&#x27;</span>, gurobipy.GRB.MINIMIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建约束条件</span></span><br><span class="line">MODEL.addConstr(<span class="string">&#x27;约束表达式，逻辑运算&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行线性规划模型</span></span><br><span class="line">MODEL.optimize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出模型结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Obj:&quot;</span>, MODEL.objVal)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> X:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x.varName&#125;</span>：<span class="subst">&#123;<span class="built_in">round</span>(x.X,<span class="number">3</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="实战代码">实战代码</h2><p>结合copilot快速求解</p><ul><li>把所有变量名,取值范围,以及最优函数先列在注释中:</li><li>根据copilot的提示,快速写代码</li></ul><h2 id="注释样例">注释样例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在一家航空公司，每个月需要大量管理者进行飞机调度以安排货运订单。现在出现了一种AI可以替他们进行调度。由于AI本身的缺陷，</span></span><br><span class="line"><span class="comment"># 每使用1个单元的AI，就会发生er次调度错误。</span></span><br><span class="line"><span class="comment"># 因此，使用AI后，公司需要投入人力进行修正，称为“修正者”。如果无法及时修正，每一笔调度错误的订单要蒙受cc元的损失。</span></span><br><span class="line"><span class="comment"># 已知本月订单数为d ，为了使航空公司调度成本最低，请制定雇佣管理者、人工智能、修正者的数量，来进行本月的订单调度。</span></span><br><span class="line"><span class="comment"># 编程符号参数大小含义</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># D_zon 121200该公司当月的订单数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># D_m 200每个管理者最多调度 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># D_a5000每单元AI最多调度 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Err_a 50每单元AI会有Err_a 次调度错误</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Fix 24每个修正者最多修正Fix 个订单</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># C_m 5000 每个管理者的花费</span></span><br><span class="line"><span class="comment"># C_a 1000 每个AI的花费</span></span><br><span class="line"><span class="comment"># C_r 8000每个修正者花费 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># F_m 10000</span></span><br><span class="line"><span class="comment"># F_a 50000</span></span><br><span class="line"><span class="comment"># F_r 10000投入固定的启用成本</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># P 3000AI税系数</span></span><br><span class="line"><span class="comment"># 模型符号变量类型  含义</span></span><br><span class="line"><span class="comment"># m,a,r INT管理者、AI、修正者数量</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># xm[i],xa[i],xr[i],0-1是否启用r i个管理者、AI、修正者</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># xmm,xaa,xrr,0-1是否启用管理者、AI、修正者</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># dm[i],da[i] INT管理者和ai调配的订单数</span></span><br><span class="line"><span class="comment"># dr[i] INT修正者修正的订单数</span></span><br><span class="line"><span class="comment"># err INT错误的订单数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束:</span></span><br><span class="line"><span class="comment"># M 代表无穷大</span></span><br><span class="line"><span class="comment"># gurobipy.quicksum(xm[i])=m,gurobipy.quicksum(xa[i])=a,gurobipy.quicksum(xr[i])=r</span></span><br><span class="line"><span class="comment"># xmm&lt;=gurobipy.quicksum(xm[i])&lt;=M*xmm,xaa&lt;=gurobipy.quicksum(xa[i])&lt;=M*xaa,xrr&lt;=gurobipy.quicksum(xr[i])&lt;=M*xrr</span></span><br><span class="line"><span class="comment"># xm[i]&lt;=dm[i]&lt;=M*xm[i],xa[i]&lt;=da[i]&lt;=M*xa[i],xr[i]&lt;=dr[i]&lt;=M*xr[i]</span></span><br><span class="line"><span class="comment"># sum(dm[i]+da[i])=D_zon</span></span><br><span class="line"><span class="comment"># err=a*Err_a - sum(dr[i])</span></span><br><span class="line"><span class="comment"># err&gt;=0</span></span><br><span class="line"><span class="comment"># dm[i]&lt;=D_m,da[i]&lt;=D_,dr[i]&lt;=Fix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C_err = 10000</span></span><br><span class="line"><span class="comment"># 目标函数:</span></span><br><span class="line"><span class="comment"># min C=[m*C_m+a*C_a+r*C_r]+[xmm*F_m+xaa*F_a+xrr*F_r]+err*C_err+a*a*P</span></span><br></pre></td></tr></table></figure><p>有了上面的注释,copilot基本上就能开始辅助我们求解了</p><p>下面为代码部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gurobipy</span><br><span class="line">N = <span class="number">10000</span></span><br><span class="line">M = <span class="number">1000</span></span><br><span class="line">D_ = <span class="number">121200</span></span><br><span class="line">D_m = <span class="number">200</span></span><br><span class="line">D_a = <span class="number">5000</span></span><br><span class="line">Err_a = <span class="number">50</span></span><br><span class="line">Fix = <span class="number">24</span></span><br><span class="line">C_m = <span class="number">5000</span></span><br><span class="line">C_a = <span class="number">1000</span></span><br><span class="line">C_r = <span class="number">8000</span></span><br><span class="line">F_m = <span class="number">10000</span></span><br><span class="line">F_a = <span class="number">50000</span></span><br><span class="line">F_r = <span class="number">10000</span></span><br><span class="line">C_err = <span class="number">10000</span></span><br><span class="line">P = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line">MODEL = gurobipy.Model()</span><br><span class="line"><span class="comment"># 创建变量</span></span><br><span class="line">m = MODEL.addVar(vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">a = MODEL.addVar(vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r = MODEL.addVar(vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">xm = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xm&#x27;</span>)</span><br><span class="line">xa = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xa&#x27;</span>)</span><br><span class="line">xr = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xr&#x27;</span>)</span><br><span class="line">xmm = MODEL.addVar(vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xmm&#x27;</span>)</span><br><span class="line">xaa = MODEL.addVar(vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xaa&#x27;</span>)</span><br><span class="line">xrr = MODEL.addVar(vtype=gurobipy.GRB.BINARY, name=<span class="string">&#x27;xrr&#x27;</span>)</span><br><span class="line">dm = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;dm&#x27;</span>)</span><br><span class="line">da = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;da&#x27;</span>)</span><br><span class="line">dr = MODEL.addVars(<span class="built_in">range</span>(<span class="number">1</span>,M),vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;dr&#x27;</span>)</span><br><span class="line">err = MODEL.addVar(vtype=gurobipy.GRB.INTEGER, name=<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line"><span class="comment"># 更新变量环境</span></span><br><span class="line">MODEL.update()</span><br><span class="line"><span class="comment"># 设置模型类型为二次规划</span></span><br><span class="line"><span class="comment"># 改为二次规划模型,作者的解决方法:</span></span><br><span class="line">MODEL.setParam(<span class="string">&quot;NonConvex&quot;</span>, <span class="number">2</span>)</span><br><span class="line">MODEL.setObjective(m*C_m+a*C_a+r*C_r+xmm*F_m+xaa*F_a+xrr*F_r+err*C_err+a*a*P,sense = gurobipy.GRB.MINIMIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建约束条件</span></span><br><span class="line"><span class="comment"># m = gurobipy.quicksum(xm)</span></span><br><span class="line"><span class="comment"># a = gurobipy.quicksum(xa)</span></span><br><span class="line"><span class="comment"># r = gurobipy.quicksum(xr)</span></span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xm) == m,name=<span class="string">&#x27;c0&#x27;</span>)</span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xa) == a,name=<span class="string">&#x27;c1&#x27;</span>)</span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xr) == r,name=<span class="string">&#x27;c2&#x27;</span>)</span><br><span class="line">MODEL.addConstr(xmm &lt;= gurobipy.quicksum(xm),name=<span class="string">&#x27;c3&#x27;</span>)</span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xm) &lt;= <span class="number">10000</span>*xmm,name=<span class="string">&#x27;c4&#x27;</span>)</span><br><span class="line">MODEL.addConstr(xaa &lt;= gurobipy.quicksum(xa),name=<span class="string">&#x27;c5&#x27;</span>)</span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xa) &lt;= <span class="number">10000</span>*xaa,name=<span class="string">&#x27;c6&#x27;</span>)</span><br><span class="line">MODEL.addConstr(xrr &lt;= gurobipy.quicksum(xr),name=<span class="string">&#x27;c7&#x27;</span>)</span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(xr) &lt;= <span class="number">10000</span>*xrr,name=<span class="string">&#x27;c8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(xm[i] &lt;= dm[i],name=<span class="string">f&#x27;c9_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(dm[i] &lt;= <span class="number">10000</span>*xm[i],name=<span class="string">f&#x27;c10_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(xa[i] &lt;= da[i],name=<span class="string">f&#x27;c11_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(da[i] &lt;= <span class="number">10000</span>*xa[i],name=<span class="string">f&#x27;c12_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(xr[i] &lt;= dr[i],name=<span class="string">f&#x27;c13_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(dr[i] &lt;= <span class="number">10000</span>*xr[i],name=<span class="string">f&#x27;c14_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">MODEL.addConstr(gurobipy.quicksum(dm)+gurobipy.quicksum(da) == D_,name=<span class="string">&#x27;c15&#x27;</span>)</span><br><span class="line">MODEL.addConstr(err == a*<span class="number">50</span> - gurobipy.quicksum(dr),name=<span class="string">&#x27;c16&#x27;</span>)</span><br><span class="line">MODEL.addConstr(err &gt;= <span class="number">0</span>,name=<span class="string">&#x27;c17&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(dm[i] &lt;= D_m ,name=<span class="string">f&#x27;c18_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(da[i] &lt;= D_a,name=<span class="string">f&#x27;c19_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,M):</span><br><span class="line">    MODEL.addConstr(dr[i] &lt;= Fix,name=<span class="string">f&#x27;c20_<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># # 设置此次执行的为二次优化问题</span></span><br><span class="line"><span class="comment"># MODEL.setParam(gurobipy.GRB.Param.ModelSense, -1)</span></span><br><span class="line"><span class="comment"># 执行最优化</span></span><br><span class="line">MODEL.optimize()</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Obj:&quot;</span>, MODEL.objVal)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> MODEL.getVars():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;v.varName&#125;</span>:<span class="subst">&#123;<span class="built_in">round</span>(v.x,<span class="number">3</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m&quot;</span>,m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r&quot;</span>,r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最少花费:&quot;</span>, MODEL.objVal)</span><br></pre></td></tr></table></figure><p>如果想求解二次型问题,需要加上这段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODEL.setParam(<span class="string">&quot;NonConvex&quot;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>MODEL.setParam(“NonConvex”, 2) 这行代码用于将 Gurobi 模型的 NonConvex 参数设置为 2。这个参数控制 Gurobi 是否允许处理非凸优化问题。</p><p>具体来说，“NonConvex” 参数的取值有以下几种：</p><ul><li>0: 默认值，表示 Gurobi 将尝试解决凸优化问题。</li><li>1: 表示 Gurobi 将尝试解决非凸优化问题，但它可能无法找到全局最优解。</li><li>2: 表示 Gurobi 将尝试解决非凸优化问题，且不会进行全局最优性的验证，这可能导致找到局部最优解。</li></ul>]]></content>
    
    
    <summary type="html">在这里总结数模中遇到的一些问题和求解方法,方便下次快速查阅</summary>
    
    
    
    <category term="数模" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E6%A8%A1/"/>
    
    
    <category term="数模" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>love-note 11-01</title>
    <link href="https://hitszzhoujy.com/posts/3daec08e.html"/>
    <id>https://hitszzhoujy.com/posts/3daec08e.html</id>
    <published>2023-11-01T15:52:08.000Z</published>
    <updated>2024-01-22T13:09:31.255Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ef766024a8db32da51656a7ca0e21383a5a6a10c366a58decb39671e8c51ba77">4630436162ade97ba2718b7d0c4b3b637bd723daf9941f227c3af79eb0e544366a00e4795ecec50f4a475353b8e0b5f4268201ce2a12ce1b55b9c78b6806d6021223c7bc7452b70aa4722a1877446c7542cefc7199b7953f669d4801058631b9b3efb0dd7225b1d059cb759be8e12d39f00ff64a8e478fe7b55aa0552f4b303dc14e854ccc4816a141865601f01c30e617257c07109c3d134b9de7ad384aabba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里记录我和女朋友的一些事情哦，需要密码才能进入!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The first fomal airticle of our love house.</summary>
    
    
    
    <category term="恋爱小屋" scheme="https://hitszzhoujy.com/categories/%E6%81%8B%E7%88%B1%E5%B0%8F%E5%B1%8B/"/>
    
    
    <category term="恋爱小屋" scheme="https://hitszzhoujy.com/tags/%E6%81%8B%E7%88%B1%E5%B0%8F%E5%B1%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据选择器实现组合逻辑函数</title>
    <link href="https://hitszzhoujy.com/posts/83f822ad.html"/>
    <id>https://hitszzhoujy.com/posts/83f822ad.html</id>
    <published>2023-10-29T08:46:56.000Z</published>
    <updated>2024-01-22T13:09:31.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>选择器输出为标准与或式，含有地址变量的全部最小项，因此可以利用这些最小项来实现逻辑函数。</p><h2 id="步骤">步骤</h2><ol><li>根据$n=k-1$或$n=k$来确定选择器的型号。(n为地址码变量的个数，k为逻辑函数的变量个数)</li><li>写出函数的标准与或式和选择器的输出信号的表达式。</li><li>对照比较，确定选择器各输入变量的表达式。</li><li>画出连线图</li></ol><h2 id="例题">例题</h2><h3 id="例题1">例题1</h3><p>$$ F=AB+BC+AC $$</p><h4 id="代数法">代数法</h4><ol><li>$n=k$ <br>则$$n=k=3$$</li><li>写出函数的标准与或式和选择器的输出信号表达式</li></ol><p>函数的标准与或式<br>$$ Y=AB(C+C’)+BC(A+A‘)+AC(B+B’) $$</p><p>$$<br>= A’BC+AB’C+ABC’+ABC<br>$$</p><p>$$<br>=\sum m(3,5,6,7)<br>$$</p><p>选择器输出信号表达式：<br>$$<br>Y=D_0A_2’A_1’A_0’+D_1A_2’A_1’A_0+D_2A_2’A_1A_0’+D_3A_2’A_1A_0+D_4A_2A_1’A_0’+D_5A_2A_1’A_0+D_6A_2A_1A_0’+D_7A_2A_1A_0<br>$$</p><p>令$A_2=A,A_1=B,A_0=C$<br>对比得：<br>$$<br>D_3=D_5=D_6=D_7=1<br>$$<br>其余为0</p><p>连线图<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/Mul8.jpg" alt="连线图"></p><h4 id="卡诺图法">卡诺图法</h4><p>$$<br>F=AB+BC+AC<br>$$<br>画出逻辑函数和复用器对应的卡诺图：<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/WechatIMG127.jpg" alt="卡诺图"><br>同样可以得出：<br>$$<br>D_2=D_5=D_6=D_7=1<br>$$<br>$$<br>D_0=D_1=D_3=D_4=0<br>$$</p><h3 id="例题2">例题2</h3><h4 id="选用n-k-1">选用n=k-1</h4><p>用$74L153$实现$F=AB+AC+BC$<br>我们需要知道$74L153$是四选一选择器。所以我们使用的是$n=k-1$的方式来实现该逻辑函数，因为只有两个地址输入端，而逻辑函数有四个变量，因此我们需要对逻辑函数进行降维。</p><h4 id="写出逻辑函数的标准与或式和选择器的输出表达式。">写出逻辑函数的标准与或式和选择器的输出表达式。</h4><p>$$<br>F=A’BC+AB’C+ABC’+ABC<br>$$<br>$$<br>Y=D_0A_1’A_0’+D_1A_1’A_0+D_2A_1A_0’+D_3A_1A_0<br>$$</p><h4 id="比较得出函数变量和地址码之间的关系">比较得出函数变量和地址码之间的关系</h4><h5 id="法1">法1</h5><p>令$A_1=A,A_0=B$,<br>$$<br>Y=D_0A’B’+D_1A’B+D_2AB’<br>+D_3AB<br>$$<br>$$<br>=A’B’D_0+A’BD_1+AB’D_2+ABD_3<br>$$<br>$$<br>F=A’BC+AB’C+ABC’+ABC<br>$$<br>对比得：$D_0=0,D_1=C,D_2=C,D_3=1$</p><h4 id="画出连线图">画出连线图</h4><p><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/lianxiantu2.jpg" alt="连线图"></p><h5 id="法2-图形法">法2 图形法</h5><p>先画出带求函数的降维卡诺图，再画出相应的数据选择器的卡诺图。<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/kanuotu2.jpg" alt="卡诺图"><br>但是这样的比较过程同样有些复杂，我们还有更便捷的方式，那就是 <strong>降维真值表</strong>。<br><img src="https://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/jiangweizhenzhibiao.jpg" alt="降维真值表"><br>如图所示，降维真值表共有五列，分别为<br>$m_i,A,B,C$,方格<br>其中$m_i$为对应要求的逻辑函数中含有的最小项，ABC的取值则由对应的最小项来决定，比如在$m_3$对应的那行的ABC取值为011，对应的则为3.</p><p>最后的方格中填的就是我们需要的结果。</p><h5 id="填写方格的方法">填写方格的方法</h5><p>前面我们说到我们需要降维，那么降维时一般都是降最低那维，在此表格中即为C。</p><ol><li>我们先在AB与C之间画一条线，把他们分割开。</li><li>接着看AB对应的项是否有出现两个相等的项，在这个表格中有两个相等的项：$m_6,m_7$,他们对应的AB都是11，因此在最后的表格中填1。</li><li>对于单独的项，则看C的取值来决定方格的取值，C=1,则方格中填C，反之填C’。</li></ol><p>由降维真值表我们就可以很快的写出降维卡诺图了。接着与上一种方法一样，同样画出选择器的卡诺图，对比来求出各个$D_i$的取值。</p><p>这种方法就先介绍到此，希望对大家有帮助。由疑问也可以直接看灿老师的讲解视频：</p><div class="tag link"><a class="link-card" title="老师讲解视频" href="https://www.bilibili.com/video/BV1A3411z7Mf/?p=45&spm_id_from=pageDriver&vd_source=67219ae74a163427f28618146ba99a28"><div class="left"><img src="/assets/coffee.png"/></div><div class="right"><p class="text">老师讲解视频</p><p class="url">https://www.bilibili.com/video/BV1A3411z7Mf/?p=45&spm_id_from=pageDriver&vd_source=67219ae74a163427f28618146ba99a28</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;选择器输出为标准与或式，含有地址变量的全部最小项，因此可以利用这些最小项来实现逻辑函数。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据$n=k-1$或$n=k$来确定选择器的型号。(n为地址码变量的个数，k为</summary>
      
    
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    <category term="数据选择器" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    <category term="数据选择器" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>杂谈</title>
    <link href="https://hitszzhoujy.com/posts/bf4ee09f.html"/>
    <id>https://hitszzhoujy.com/posts/bf4ee09f.html</id>
    <published>2023-10-28T10:57:56.000Z</published>
    <updated>2024-01-22T13:09:31.254Z</updated>
    
    <content type="html"><![CDATA[<p>今天从早上开始忙活到下午，给博客加了评论的功能，修了一些小错误，加了个线上编辑的功能。不得不说，配网站真辛苦呀，不过看到成果还是很有成就感的。感觉像看着自己的孩子在慢慢成长一样，从一张白纸到开始具有自己的特色，开始有较完善的功能。这里不得不感谢网上各路的开源大佬和Q群里面热心的群友。</p><p>但是博客的内核毕竟还是其内容，一个优秀的博客不在其绚丽的外表，而在其充实的内容。明天开始就不再花太多时间来折腾博客的配置啦，除非有很必须的功能要添加。将花更多时间在算法和考试课上，同时会持续性的写一些好题的算法题解。</p><p>还有，不得不说，作业真的好多呀，已经积压了三篇大物实验报告，概率论，算法，数电，数电实验，明天要all in 作业啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天从早上开始忙活到下午，给博客加了评论的功能，修了一些小错误，加了个线上编辑的功能。不得不说，配网站真辛苦呀，不过看到成果还是很有成就感的。感觉像看着自己的孩子在慢慢成长一样，从一张白纸到开始具有自己的特色，开始有较完善的功能。这里不得不感谢网上各路的开源大佬和Q群里面热</summary>
      
    
    
    
    <category term="杂谈" scheme="https://hitszzhoujy.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="https://hitszzhoujy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>love note 10-27</title>
    <link href="https://hitszzhoujy.com/posts/ad2ca5fd.html"/>
    <id>https://hitszzhoujy.com/posts/ad2ca5fd.html</id>
    <published>2023-10-27T14:01:44.000Z</published>
    <updated>2024-01-22T13:09:31.254Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="df9271bef97a6623fc56363cc0ffc4da75efdfb76bf00f545cde84733e8a59ae">4630436162ade97ba2718b7d0c4b3b63c0564b4e8a221c652eb915fdcb7c022b5a4ca881e0ae6a99c39a7266aa0d79b5cd8f1a23639d5f56b926d802b04a3a31ce8184ae95b71baa0d2936c8e39d92fe63e2aac811d75e430470a91403da42a582455fcf6d00118c3d4a166294b8772c038b9ef68218fa3fad55124dbb0347e771753f45a7715f624b496ab1b3979a9460e5771c649535201aed79e24a240a2f8cfcbbbbe9ed348752d8c1c8de134c9478e4a0eda7f04400ceae854d033dee74177f7422fdb3b7eb8d6489d3b915c259d94ceafe8453a48c06b87724290850656d69668133f2b962b460d9e8c01afa54d7af736a6b491da8fce10e2542ad98665678b1aeda3ad24325f5204eb57025f014ad438fc1b0f9a826f4d8fe4021cc19ebeca842d4683220fc320daa6b8b2112aa4eeddd44b5238ef313f9d5d663ad3887bf7a4b88072e47311456845371fd65f4ea523e5f6b516393f6476ed02416364839ec8971baf8167765b9f46b12ffebf48254345408eb329b2a1ea8a4db90102bbce68a59ec20bdde6cee428b90b60d865a81370192bffaf59dc6bb282f58eb8293985e9e04195010c06ceea94aa3fa9c3c0cc42a384c0b0cff80b847c3e827ab2b5f97d3787e1b51c4f0db411995dd7f37fa32caf230ef17b66496a193718c15947d737518066b61802ce8d3013679243cb0f97596e149161b4062c821966ce572cb937e39bddcbdc5107651b49d9117857f3acd307a40db74f10e65ce6b74555dfceaa4c1b5957bd3e96eff4b16ce322b0660950c87ab86926fa99fdeee30d8d12d2261914eeb4a53dac3555b1dd2de65b3b1e2dce865260169a51ec79804af469bbc56b3458a10f5f70aff9c4b22195aa32d061faa68fb27c066daabdaa2afb447ff3c4695fdf6b3d5459e05a252f0fab5e0fa38315fe3cda4ee608fea9d0a4cc9bd1fdb2e84f11e22a7dbc3e2dc1636b1d9f556913c958b2e0b2d00faf51c4bd69ebe759873b6422bc7a74e7c11c0120d93f5c0a41514932a160bc4e4a6fac6f7c6aea266f3cd25ef4f8a64a1f8e073a251fb11fab5aad290c941f9b7903c7a75b55c07fb0b43deebad1a0e72c52bac2499f4f3e4e0cf8fe214a30cad195b263e8fd4b8b02597730e65f8c8fb4591ba454c2d1c7194a10a44ab7ddec8b3acc3717f88c5fd54011087656038c556e648163919706745995be65ded445041bf119e42e1a8585353ee04ac75098e7f4c0c47224d6a5a2255b0f47eea279fc0d109462e3761a98b435e5d80a281a00345a88f92271f7d5a768e23e5b1666c95225eaf701f5f6d49c8f5b51e12038f69b07c4c72dc2545bb0560e0b5b9e3c4c0f7960ed5ea7ac2c026d5851f4e164b5adffacce2cc3b7aec836b28f1b2cd362ccfc32316d0069695459afdf2a3c9861babc226dc121e03f902d3377503f487c9c885698d6fd6ee22e757699e59f9aee2d216e645889e3980bd0c51e20b1d85daa69c7f555562c2d2a0ff7f07500a2ff413f8433b6a1028275b9915b2684c4d63782f0807ab3499ef07a515fbb7c95ca37e178b0389b4efb62eac9ae1877eafd03bfecccf159f3f2decf64bf8e26b8ade28ae0fe4c6e295034c66b9e1e9a4b643dfc29746b4ee79ed64ec2f4fc50a7c95407aec4ae214e30770df36e4059ca91aeb1cb4ebd89d9484544107125e2d74e721976b5a58bc907c071a699759c3a83c829f5f3fa335a55b14180099728e4abe9851da32102f646f854219f05391e45bda093d159237a86fb4b06262ffb834d06ddaeb28c55232dffa959449ad71ee6917b03ce1f17c7b5a62ab6cc622d4c0767c7e17440e6595a670b22571d5a2ea6542d4029c55b0a1635ad0c3f2abb44a7a9a62a2d4a858bbe407c037148ce1fbf1246a97566f9b49b1af6f1ca56ac625d49c53f1609c074be15ce4c130eebae728b627866507b9dc4b1af2c175a197f5f6806b3e9abb3d1879091fc25b2883e8165c455bcd0786bbc5692746059f0b0323c35a180a9173f0760c768afe58cce06d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里记录我和女朋友的一些事情哦，需要密码才能进入!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The first fomal airticle of our love house.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>cf1024B_状态压缩dp或暴力</title>
    <link href="https://hitszzhoujy.com/posts/ec2daa9a.html"/>
    <id>https://hitszzhoujy.com/posts/ec2daa9a.html</id>
    <published>2023-10-27T03:53:10.000Z</published>
    <updated>2024-01-22T13:09:31.253Z</updated>
    
    <content type="html"><![CDATA[<h1>Vitamins</h1><h2 id="题面翻译">题面翻译</h2><p>数据有$n$组数,每组数有一个价值$c_i$和一个字符串S,字符串S中包含3个字母A,B,C，问集齐ABC三个字母的最小价值（一个字母可以有多个）</p><h2 id="题目描述">题目描述</h2><p>Berland shop sells $ n $ kinds of juices. Each juice has its price $ c_i $ . Each juice includes some set of vitamins in it. There are three types of vitamins: vitamin “A”, vitamin “B” and vitamin “C”. Each juice can contain one, two or all three types of vitamins in it.</p><p>Petya knows that he needs all three types of vitamins to stay healthy. What is the minimum total price of juices that Petya has to buy to obtain all three vitamins? Petya obtains some vitamin if he buys at least one juice containing it and drinks it.</p><h2 id="输入格式">输入格式</h2><p>The first line contains a single integer $ n $ $ (1 \le n \le 1,000) $ — the number of juices.</p><p>Each of the next $ n $ lines contains an integer $ c_i $ $ (1 \le c_i \le 100,000) $ and a string $ s_i $ — the price of the $ i $ -th juice and the vitamins it contains. String $ s_i $ contains from $ 1 $ to $ 3 $ characters, and the only possible characters are “A”, “B” and “C”. It is guaranteed that each letter appears no more than once in each string $ s_i $ . The order of letters in strings $ s_i $ is arbitrary.</p><h2 id="输出格式">输出格式</h2><p>Print -1 if there is no way to obtain all three vitamins. Otherwise print the minimum total price of juices that Petya has to buy to obtain all three vitamins.</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span>C</span><br><span class="line"><span class="symbol">6 </span>B</span><br><span class="line"><span class="symbol">16 </span>BAC</span><br><span class="line"><span class="symbol">4 </span>A</span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">10 </span>AB</span><br><span class="line"><span class="symbol">15 </span>BA</span><br></pre></td></tr></table></figure><h3 id="样例输出-2">样例输出 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-1</span></span><br></pre></td></tr></table></figure><h2 id="样例-3">样例 #3</h2><h3 id="样例输入-3">样例输入 #3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">10 </span>A</span><br><span class="line"><span class="symbol">9 </span>BC</span><br><span class="line"><span class="symbol">11 </span>CA</span><br><span class="line"><span class="symbol">4 </span>A</span><br><span class="line"><span class="symbol">5 </span>B</span><br></pre></td></tr></table></figure><h3 id="样例输出-3">样例输出 #3</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h2 id="样例-4">样例 #4</h2><h3 id="样例输入-4">样例输入 #4</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">100 </span>A</span><br><span class="line"><span class="symbol">355 </span>BCA</span><br><span class="line"><span class="symbol">150 </span>BC</span><br><span class="line"><span class="symbol">160 </span>AC</span><br><span class="line"><span class="symbol">180 </span>B</span><br><span class="line"><span class="symbol">190 </span>CA</span><br></pre></td></tr></table></figure><h3 id="样例输出-4">样例输出 #4</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">250</span><br></pre></td></tr></table></figure><h2 id="样例-5">样例 #5</h2><h3 id="样例输入-5">样例输入 #5</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">5 </span>BA</span><br><span class="line"><span class="symbol">11 </span>CB</span><br></pre></td></tr></table></figure><h3 id="样例输出-5">样例输出 #5</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>In the first example Petya buys the first, the second and the fourth juice. He spends $ 5 + 6 + 4 = 15 $ and obtains all three vitamins. He can also buy just the third juice and obtain three vitamins, but its cost is $ 16 $ , which isn’t optimal.</p><p>In the second example Petya can’t obtain all three vitamins, as no juice contains vitamin “C”.</p><h2 id="状态压缩DP">状态压缩DP</h2><p>比赛时没想到用状态压缩DP，直接暴力了，今天看题解才发现dp是非常妙的。</p><h3 id="状态压缩">状态压缩</h3><p>用001表示A，010表示B，100表示C</p><h3 id="DP">DP</h3><p><strong>转移方程</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j|p[i]]=<span class="built_in">min</span>(f[j|p[i]],f[j]+w[i]);</span><br></pre></td></tr></table></figure><p>p[i]代表第i个字符串中含有的字母，比如：p[i]=011就代表第i个字符串含有AB。</p><h3 id="代码：">代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,w[N],p[N],f[<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c)&amp;&amp;c!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;A&#x27;</span>)p[i]|=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;B&#x27;</span>)p[i]|=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;C&#x27;</span>)p[i]|=<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">7</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j|p[i]]=<span class="built_in">min</span>(f[j|p[i]],f[j]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(f[<span class="number">7</span>]==<span class="number">0x3f3f3f3f</span>?<span class="number">-1</span>:f[<span class="number">7</span>])&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="暴力">暴力</h2><p>昨天在场上直接暴力做了，就不具体解释暴力做法了，大家可以直接看源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL ans;</span><br><span class="line">LL n;</span><br><span class="line">LL min1[<span class="number">3</span>];</span><br><span class="line">LL min2[<span class="number">3</span>]; <span class="comment">// AB,AC,BC</span></span><br><span class="line">LL min3 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">bool</span> a = <span class="literal">false</span>, b = <span class="literal">false</span>, c = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(string s, <span class="type">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min1[i] = min2[i] = <span class="number">3e5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL p;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; p &gt;&gt; s;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(s, <span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            a = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(s, <span class="string">&#x27;B&#x27;</span>))</span><br><span class="line">            b = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(s, <span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">            c = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> l = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min1[s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>] = <span class="built_in">min</span>(min1[s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>], p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="string">&quot;AB&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                min2[<span class="number">0</span>] = <span class="built_in">min</span>(min2[<span class="number">0</span>], p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;AC&quot;</span>)</span><br><span class="line">                min2[<span class="number">1</span>] = <span class="built_in">min</span>(min2[<span class="number">1</span>], p);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                min2[<span class="number">2</span>] = <span class="built_in">min</span>(min2[<span class="number">2</span>], p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            min3 = <span class="built_in">min</span>(min3, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;a&lt;&lt;b&lt;&lt;c&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span> (!a || !b || !c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>, ans3 = <span class="number">0</span>;</span><br><span class="line">    LL ans4 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    ans3 = min3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans1 += min1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ans2 = <span class="built_in">min</span>(min2[<span class="number">0</span>] + min2[<span class="number">1</span>], min2[<span class="number">1</span>] + min2[<span class="number">2</span>]);</span><br><span class="line">    ans2 = <span class="built_in">min</span>(ans2, min2[<span class="number">0</span>] + min2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans4 = <span class="built_in">min</span>(min1[i] + min2[<span class="number">2</span> - i], ans4);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">min</span>(ans1, ans2);</span><br><span class="line">    ans = <span class="built_in">min</span>(ans, ans3);</span><br><span class="line">    ans = <span class="built_in">min</span>(ans, ans4);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一道训练赛中用暴力做出来的dp题</summary>
    
    
    
    <category term="dp" scheme="https://hitszzhoujy.com/categories/dp/"/>
    
    <category term="状态压缩" scheme="https://hitszzhoujy.com/categories/dp/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    
    <category term="状态压缩" scheme="https://hitszzhoujy.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    <category term="dp" scheme="https://hitszzhoujy.com/tags/dp/"/>
    
    <category term="暴力" scheme="https://hitszzhoujy.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="校赛" scheme="https://hitszzhoujy.com/tags/%E6%A0%A1%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>唐多令·芦叶满汀洲</title>
    <link href="https://hitszzhoujy.com/posts/dae87d5e.html"/>
    <id>https://hitszzhoujy.com/posts/dae87d5e.html</id>
    <published>2023-10-27T03:07:35.000Z</published>
    <updated>2024-01-22T13:09:31.256Z</updated>
    
    <content type="html"><![CDATA[<div class='poem'><div class='poem-title'>唐多令·芦叶满汀洲</div><div class='poem-author'>刘过</div><p>安远楼小集，侑觞歌板之姬黄其姓者，乞词于龙洲道人，为赋此《唐多令》。同柳阜之、刘去非、石民瞻、周嘉仲、陈孟参、孟容。时八月五日也。</p><p>芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。<br>黄鹤断矶头，故人今在否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游。</p></div><p><strong>欲买桂花同载酒，终不似，少年游</strong>，每次看到这句词都有点伤感呀。</p>]]></content>
    
    
    <summary type="html">欲买桂花同载酒，终不似，少年游。</summary>
    
    
    
    <category term="诗词" scheme="https://hitszzhoujy.com/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
    <category term="诗词" scheme="https://hitszzhoujy.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>水调歌头</title>
    <link href="https://hitszzhoujy.com/posts/ac668694.html"/>
    <id>https://hitszzhoujy.com/posts/ac668694.html</id>
    <published>2023-10-27T02:59:10.000Z</published>
    <updated>2024-01-22T13:09:31.256Z</updated>
    
    <content type="html"><![CDATA[<div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div>]]></content>
    
    
    <summary type="html">水调歌头</summary>
    
    
    
    <category term="诗词" scheme="https://hitszzhoujy.com/categories/%E8%AF%97%E8%AF%8D/"/>
    
    <category term="苏轼" scheme="https://hitszzhoujy.com/categories/%E8%AF%97%E8%AF%8D/%E8%8B%8F%E8%BD%BC/"/>
    
    
    <category term="诗词" scheme="https://hitszzhoujy.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>恋爱小屋</title>
    <link href="https://hitszzhoujy.com/posts/e795bdc5.html"/>
    <id>https://hitszzhoujy.com/posts/e795bdc5.html</id>
    <published>2023-10-26T16:27:00.000Z</published>
    <updated>2024-01-22T13:09:31.256Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="48036e5b79434f2232143fd559a9fe1de42d653a9a16753211ecf4af12388dc4">4630436162ade97ba2718b7d0c4b3b635d123ac9ac605d887cb0391a5292a772d40bada9bb93b8e75bc42994765e74be85640d89bf7a89dd5d86701abfbd0c1fe11f9d066238a886fd29b95653433ec8be49945beab307cc6b4c0b90745f1f69b8a1c24807bf6f81380b6bb9875728395b3c0c8cd36ded2fe885d724c60e5ce875fc533daf50db3eb33f9b618e5c991c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">这里记录我和女朋友的一些事情哦，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The first airtcle of love house.</summary>
    
    
    
    <category term="恋爱小屋" scheme="https://hitszzhoujy.com/categories/%E6%81%8B%E7%88%B1%E5%B0%8F%E5%B1%8B/"/>
    
    
    <category term="love" scheme="https://hitszzhoujy.com/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>acw178/p4467_第k短路</title>
    <link href="https://hitszzhoujy.com/posts/b114de59.html"/>
    <id>https://hitszzhoujy.com/posts/b114de59.html</id>
    <published>2023-10-26T08:29:44.000Z</published>
    <updated>2024-01-22T13:09:31.253Z</updated>
    
    <content type="html"><![CDATA[<h1>[SCOI2007] k短路</h1><h2 id="题目描述">题目描述</h2><p>有 $n$ 个城市和 $m$ 条单向道路，城市编号为 $1$ 到 $n$。每条道路连接两个不同的城市，且任意两条道路要么起点不同要么终点不同，因此 $n$ 和 $m$ 满足$m \le n(n-1)$。</p><p>给定两个城市 $a$ 和 $b$，可以给 $a$ 到 $b$ 的所有简单路（所有城市最多经过一次，包括起点和终点）排序：先按长度从小到大排序，长度相同时按照字典序从小到大排序。你的任务是求出 $a$ 到 $b$ 的第 $k$ 短路。</p><h2 id="输入格式">输入格式</h2><p>输入第一行包含五个正整数 $n,m,k,a,b$。</p><p>以下 $m$ 行每行三个整数 $u,v,l$，表示从城市 $u$ 到城市 $v$ 有一条长度为 $l$ 的单向道路。</p><h2 id="输出格式">输出格式</h2><p>如果 $a$ 到 $b$ 的简单路不足 $k$ 条，输出 <code>No</code>，否则输出第 $k$ 短路：从城市 $a$ 开始依次输出每个到达的城市，直到城市 $b$，中间用减号 <code>-</code> 分割。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">20</span> <span class="number">10</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>-<span class="number">2</span>-<span class="number">4</span>-<span class="number">3</span>-<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">6</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-2">样例输出 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>-<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="样例-3">样例 #3</h2><h3 id="样例输入-3">样例输入 #3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">3</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-3">样例输出 #3</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">No</span></span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>第一个例子有 $5$ 个城市，所有可能出现的道路均存在。从城市 $1$ 到城市 $5$ 一共有 $5$ 条简单路，排序如下：</p><p><img src="https://cdn.luogu.com.cn/upload/pic/17706.png" alt=""></p><ul><li>$20%$ 的数据满足：$n\leq 5$；</li><li>$40%$ 的数据满足：$n\leq 30$；</li><li>$100%$ 的数据满足：$2\leq n\leq 50$，$1\leq k\leq 200$，$1\le l\le 10^4$。</li></ul><h2 id="acwing178">acwing178</h2><h3 id="分析">分析</h3><p>最暴力的做法就是用优先队列BFS来求解，优先队列中存入一个二元组(dist,x)dist代表x到起点的距离，‘</p>]]></content>
    
    
    <summary type="html">第k短路的题解</summary>
    
    
    
    <category term="算法" scheme="https://hitszzhoujy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://hitszzhoujy.com/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="算法" scheme="https://hitszzhoujy.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://hitszzhoujy.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="A*算法" scheme="https://hitszzhoujy.com/tags/A-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hitszzhoujy.com/posts/0.html"/>
    <id>https://hitszzhoujy.com/posts/0.html</id>
    <published>2023-10-26T06:26:10.671Z</published>
    <updated>2023-10-26T06:26:10.671Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>p1141_01矩阵.md</title>
    <link href="https://hitszzhoujy.com/posts/265c9657.html"/>
    <id>https://hitszzhoujy.com/posts/265c9657.html</id>
    <published>2023-10-25T01:57:33.000Z</published>
    <updated>2023-10-26T06:26:10.671Z</updated>
    
    <content type="html"><![CDATA[<h1>01迷宫</h1><h2 id="题目描述">题目描述</h2><p>有一个仅由数字 $0$ 与 $1$ 组成的 $n \times n$ 格迷宫。若你位于一格 $0$ 上，那么你可以移动到相邻 $4$ 格中的某一格 $1$ 上，同样若你位于一格 $1$ 上，那么你可以移动到相邻 $4$ 格中的某一格 $0$ 上。</p><p>你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p><h2 id="输入格式">输入格式</h2><p>第一行为两个正整数 $n,m$。</p><p>下面 $n$ 行，每行 $n$ 个字符，字符只可能是 $0$ 或者 $1$，字符之间没有空格。</p><p>接下来 $m$ 行，每行两个用空格分隔的正整数 $i,j$，对应了迷宫中第 $i$ 行第 $j$ 列的一个格子，询问从这一格开始能移动到多少格。</p><h2 id="输出格式">输出格式</h2><p>$m$ 行，对于每个询问输出相应答案。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="number">01</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>对于样例，所有格子互相可达。</p><ul><li>对于 $20%$ 的数据，$n \leq 10$；</li><li>对于 $40%$ 的数据，$n \leq 50$；</li><li>对于 $50%$ 的数据，$m \leq 5$；</li><li>对于 $60%$ 的数据，$n,m \leq 100$；</li><li>对于 $100%$ 的数据，$1\le n \leq 1000$，$1\le m \leq 100000$。</li></ul><h2 id="分析">分析</h2><p>看到本题的第一反应是用dfs求出每个连通块的点的个数，则连通块中的每个点的可达点个数就是连通块的大小。</p><h3 id="样例：">样例：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>对于样例我们可以看到每个点之间都是相互可达的，故只有一个连通块，大小为4，所以每个点的可达点个数都是4。</p><h2 id="实现">实现</h2><h3 id="普通DFS">普通DFS</h3><p>一开始我直接只用DFS来求每个连通块的大小，并在搜索完该连通块中的一个点后，把所有点的可达个数都改成改连通块大小，在下次询问时可直接返回结果。最大时间复杂度是$O(n^2)$，最大深度也说$O(n^2)$，数据是$1000$，很不幸出现RE了。</p><h3 id="用并查集进行优化">用并查集进行优化</h3><p>不过加上并查集进行优化后进可以AC了。</p><p>这里回顾一下并查集的代码</p><p>[并查集模板题]:<a href="https://www.acwing.com/activity/content/problem/content/885/">AcWing 836. 合并集合 - AcWing</a></p><h4 id="并查集模板代码：">并查集模板代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==p[x]?x:p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> h1=<span class="built_in">find</span>(a),h2=<span class="built_in">find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(h1!=h2)</span><br><span class="line">    &#123;</span><br><span class="line">        p[h2]=h1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>]; </span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(*op==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Union</span>(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于这道题就可以把每个相互可达的点放在一个并查集中，当每次搜索时都把两个相邻的并查集连接同时更新并查集的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M =<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N],p[N],n,m;<span class="comment">//f[i]代表第i个点的子节点数+1(加上自己)，p[i]代表第i个点的父节点。</span></span><br><span class="line"><span class="type">char</span> g[M][M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==p[x]?x:p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把b的祖宗节点连到a的祖宗节点上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> h1=<span class="built_in">find</span>(a),h2=<span class="built_in">find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(h1!=h2)</span><br><span class="line">    &#123;</span><br><span class="line">        p[h2]=h1;</span><br><span class="line">        f[h1]+=f[h2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dfs返回的是点(x,y)的祖宗节点，在找祖宗节点的同时也把所有和(x,y)相互可达的点连到他们的祖宗节点上</span></span><br><span class="line"><span class="comment">//通过祖宗节点的f值，就可以知道整个并查集的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x*n+y]!=<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x*n+y);</span><br><span class="line">    p[x*n+y]=x*n+y;<span class="comment">//把x，y映射成x*n+y</span></span><br><span class="line">    f[x*n+y]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(nx&gt;=<span class="number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="number">0</span>&amp;&amp;ny&lt;n&amp;&amp;g[x][y]!=g[nx][ny])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp=<span class="built_in">dfs</span>(nx,ny);</span><br><span class="line">            <span class="built_in">Union</span>(x*n+y,tmp);</span><br><span class="line">            <span class="comment">//把以nx,ny所在的并查集,连接到(x,y)所在的并查集上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;x*n+y=%d find(x*n+y)=%d\n&quot;,x*n+y,find(x*n+y));</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x*n+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">-1</span>,<span class="keyword">sizeof</span> p);<span class="comment">//初始时把所有节点的父节点都更新成-1，表示这个点还没有被访问过。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        cout&lt;&lt;f[<span class="built_in">dfs</span>(x<span class="number">-1</span>,y<span class="number">-1</span>)]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不过这种方法同样会有栈溢出的风险，毕竟他只是加速了我们搜索每层的时间，但是并不能让我们的搜索层数变少。而洛谷的数据可以让并查集的方法过，而不能让dfs过，但是我在本地运行时，当数据量非常大时，dfs+并查集的方法一样会使栈溢出，所以更优的选择应该是循环+并查集或者bfs，后续会补上这两种方法。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;01迷宫&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;有一个仅由数字 $0$ 与 $1$ 组成的 $n &#92;times n$ 格迷宫。若你位于一格 $0$ 上，那么你可以移动到相邻 $4$ 格中的某一格 $1$ 上，同样若你位于一格 $1$ 上，那么你可</summary>
      
    
    
    
    <category term="算法" scheme="https://hitszzhoujy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://hitszzhoujy.com/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="dfs" scheme="https://hitszzhoujy.com/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/dfs/"/>
    
    
    <category term="算法" scheme="https://hitszzhoujy.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="并查集" scheme="https://hitszzhoujy.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="dfs" scheme="https://hitszzhoujy.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>第9章 多路选择器、译码器和可编程逻辑器件</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>多路选择器、译码器和可编程逻辑器件</h1><h2 id="主线">主线</h2><ol><li>多路选择器</li><li>三态缓冲器</li><li>译码器和编码器</li><li>只读存储器</li><li>可编程逻辑器件</li><li>复杂可编程逻辑器件</li><li>现场可编程门阵列</li></ol><h2 id="目标">目标</h2><ol><li>解释多路选择器的功能。用门电路实现多路选择器。</li><li>解释三态缓冲器的工作原理。当多个三态缓冲器的输出并联时，分析其最终的输出状态。利用三态缓冲器将多路选择器的信号接到总线上。</li><li>解释编码器和译码器的工作原理。用译码器和其他门电路实现一组逻辑函数。用门电路实现译码器或者优先编码器。</li><li>解释只读存储器（Read Only Memory,ROM)的工作原理。用ROM实现一组逻辑函数。</li><li>解释可编程逻辑阵列（Programmalbe Logic Array,PLA)的工作原理。给定一个PLA的数据表或者内部连线图，确定其实现的逻辑函数。</li><li>解释可编程阵列逻辑器件（Programmable Array Logic，PAL)的工作原理。确定用PAL实现一组逻辑函数所需的编程阵列图。</li><li>解释复杂可编程逻辑器件（Complex Programmable Logic Device,CPLD)和现场可编程阵列（Field Programmable Gate Array,FPGA)的工作原理。</li><li>用香农展开定理分解开关函数。</li></ol><h2 id="9-2多路选择器">9.2多路选择器</h2><p>多路选择器也称为数据选择器(MUX),有一组数据输入端和一组控制端</p>]]></content>
    
    
    <summary type="html">🥧本文对数字电路第9章的内容进行总结</summary>
    
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>第7章 多级门电路/与非门和或非门</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>多级门电路/与非门和或非门</h1><h2 id="主线">主线</h2><ol><li>多级门电路</li><li>与非门和或非门</li><li>两级与非门和或非门电路设计</li><li>多级与非门和或非门电路设计</li><li>用门代替符号转换电路</li><li>二级多输出电路设计</li><li>多输出与非门和或非门电路</li></ol><h2 id="7-1多级门电路">7.1多级门电路</h2><p>电路的级数:电路中串联的门的最大数目就是电路的级数.</p><h3 id="7-1-1改变电路级数的方法">7.1.1改变电路级数的方法:</h3><ol><li>与或电路的级数会随着对推导出来的积之和式的因式分解而增加.</li><li>或与电路的级数会随着对推导出来的和之积式的展开而增加.</li></ol><blockquote><p>有时通过因式分解/展开各项可以增加电路的级数,从而减少需要的门数和门输入数目,但有时增加电路的级数反而会增大制造成本.</p></blockquote><h3 id="7-1-2用树状图确定确定为了实现一个函数需要的门和门输入数">7.1.2用树状图确定确定为了实现一个函数需要的门和门输入数</h3><ol><li>$Z_1=[(A+B)C+DE(F+G)H]$</li><li>$Z_2=A+B[C+DE(F+G)]$<br><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image.png" alt="Alt text"></li></ol><h3 id="7-1-3找出一个最简的二级结果-为什么必须要同时考虑函数的和之积式和积之和式">7.1.3找出一个最简的二级结果,为什么必须要同时考虑函数的和之积式和积之和式</h3><p>因为要比较和之积式和积之和式的化简结果才知道,哪种方式最终使用的门数最少,以及门输入量最少.</p><h2 id="7-2与非门和或非门">7.2与非门和或非门</h2><h3 id="逻辑电路设计者常使用与非门和或非门的原因">逻辑电路设计者常使用与非门和或非门的原因</h3><ol><li>和与门、或门相比,通常与非门和或非门速度更快,需要的元件更少.</li><li>只使用与非门或者或非门就能实现任何逻辑电路.</li></ol><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230921154114950.png" alt="image-20230921154114950"></p><h3 id="确定一组门是否的功能完善的方法">确定一组门是否的功能完善的方法</h3><ol><li>写出每个门所实现的函数的最简积之和表达式.</li><li>如果出现了取反运算,那么可以通过适当选择对应门的输入来实现非门.</li><li>尝试是否可以实现与运算或者或运算,一旦实现其中一个,则可实现另外一个(待补)</li></ol><blockquote><p>需要用与非门画出函数$F=((X+Y)‘+(X’+Z)‘)’$的电路图</p></blockquote><h2 id="7-3两级与非门和或非门电路设计">7.3两级与非门和或非门电路设计</h2><p>根据Demorgan定律,可以很容易的将由与门和或门组成的电路转成由与非门或者或非门组成的电路.</p><blockquote><p>Demorgan定律:<br>$$<br>(X_1+X_2+…+X_n)‘=X_1’X_2’…X_n’\<br>(X_1X_2…X_n)‘=X_1’+X_2’+…+X_n’<br>$$</p></blockquote><p>举例:<br>$$<br>\begin{split}<br>F&amp;=A+BC’+B’CD\<br>&amp;=[A’(BC’)‘(B’CD)’]‘(与非-与非)\<br>&amp;=[A’(B’+C)(B+C’+D’)]‘\<br>&amp;=A+(B’+C)‘+(B+C’+D’)‘\<br>&amp;=[A+(B’+C)‘+(B+C’+D’)‘]’(或非-或非-取反)<br>\end{split}<br>$$<br>有上可知,我们得到了一个或非-或非-取反电路,但是如果我们想得到一个只含有或非门的电路,<strong>就要先化简成最简和之积式</strong>,<strong>而不是最简积之和式</strong>.</p><p>举例:我们将上式中的$F$改写成最简和之积式.<br>$$<br>\begin{split}<br>F=&amp;(A+B+C)(A+B’+C’)(A+C’+D)\<br>=&amp;{[(A+B+C)(A+B’+C’)(A+C’+D)]‘}’\<br>=&amp;{(A+B+C)‘+(A+B’+C’)+(A+C’+D)‘}’(或非-或非)\<br>=&amp;{(A’B’C’)+(A’BC)+(A’CD’)}‘\<br>=&amp;(A’B’C’)‘(A’BC)’(A’CD’)'\<br>\end{split}<br>$$<br>在最简和之积式的情况下,可以化简为只含或非门的电路,在最简积之和式的条件下,可以化简为只含与非门的电路.</p><h3 id="二级电路的八种形式">二级电路的八种形式</h3><ol><li>与-或</li><li>与非-与非</li><li>或非-或</li><li>或-与非</li><li>或-与</li><li>或非-或非</li><li>与-或非</li><li>与非-或非</li></ol><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923150136864.png" alt="image-20230923150136864"></p><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923150150564.png" alt="image-20230923150150564"><br>$$</p><p>$$<br>对于二级电路,共有:$2^4=16$种组合,但是其它八种是不完善的,他们不能表示所有的开关函数.</p><p>因为集成电路中的与非门和或非门易于得到,所以最常用的两种电路是:与非-与非,或非-或非.</p><h3 id="设计最简两级与非-与非电路的步骤">设计最简两级与非-与非电路的步骤:</h3><ol><li><p>找出F的<strong>最简积之和式</strong></p></li><li><p>画出对应的与或电路</p></li><li><p>用与非门代替所有门,保持原有门的相互连接方式不变.如果门有任何单个输入变量,则对其取反.</p><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923150933787.png" alt="image-20230923150933787"></p><h3 id="设计最简两级或非-或非电路的步骤">设计最简两级或非-或非电路的步骤:</h3><ol><li>找出F的<strong>最简和之积式</strong></li><li>画出对应的或-与电路</li><li>用或非门代替所有的门,并保留原有门的相互连接方式不变.如果对输出门有任何作为输入的单个变量,则将这些变量取反.</li></ol><h2 id="多级与非门和或非门的电路设计">多级与非门和或非门的电路设计</h2><h3 id="设计多级与非门的具体步骤">设计多级<strong>与非门</strong>的具体步骤:</h3><ol><li>化简要实现的开关函数</li><li>设计多级与门和或门电路,且输出级必须为或门.与门的输出不能作为其他与门的输入;或门的输出不能作为其他或门的输入.</li><li>将输出门作为第一级来标识电路的级数.将所有门替换为与非门,保留所有门之间的连接方式不变,对1,3,5…级的门输入取反,而对2,4,6…级门输入保持不变.</li></ol><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923151854252.png" alt="image-20230923151854252"><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923151901391.png" alt="image-20230923151901391"></p></li></ol><h2 id="用门的替代符号转换电路">用门的替代符号转换电路</h2><p>![image-20230923152059863](/Users/zhouzhou/Library/Application Support/typora-user-images/image-20230923152059863.png)</p><p>将与-或电路转换成为与非电路的一般步骤:</p><ol><li>通过在门的输出端添加取反圆圈,将所有的与门替换为与非门.通过在门的输入端添加取反符号,将所有的或门替换成与非门.</li><li>每当反相输出连接到反向输入,则不需要进行任何操作,因为两次取反可以抵消.</li><li>每当非反相输出连接到反相输入,或者反过来,则要插入一个反相器,以抵消掉取反圆圈.</li><li>如果一个变量连接到反相输入,那么对该变量取反.</li></ol><p><img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923154958341.png" alt="image-20230923154958341"></p><h2 id="7-6二级、多输出电路设计">7.6二级、多输出电路设计</h2>]]></content>
    
    
    <summary type="html">🥧本文对数字电路第七章的内容进行总结</summary>
    
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>第8章 用门电路设计和模拟组合电路</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>用门电路设计和模拟组合电路</h1><h2 id="主线">主线</h2><ol><li>门延迟和时序图</li><li>组合逻辑的冒险</li><li>逻辑电路的仿真和测试</li></ol><h2 id="8-3-门延迟和时序图">8.3 门延迟和时序图</h2><h3 id="门延迟的原因">门延迟的原因</h3><p>当改变逻辑电路的输入时,输出并不会立刻发生该变.门内的晶体管或者其他开关器件需要一定的时间对输入的变化做出反应,以至于对应门输入的改变,门输出的改变会延迟.<img src="http://hitszzhou.oss-cn-shenzhen.aliyuncs.com/assets/image-20230923164004537.png" alt="image-20230923164004537"></p><p>时序图常用来分析时序电路.这种图给出了电路中信号相对于时间函数的变化规律.通常把几个变量画在一张图中,这样很容易的观察出这些变量相对于其他变量随时间的变化.</p><h2 id="组合逻辑的冒险">组合逻辑的冒险</h2><p>当组合电路的输入发生变化时,输出端可能会出现不期望的瞬变.当从输入到输出的不同路径有不同的传输延迟时就会发生这种瞬变.</p><h3 id="静态1-冒险">静态1-冒险</h3><p>由于任何单个变量的变化和某种传输延迟组成,电路输出可能会瞬间发生翻转变成0,而它本应该是1.</p><h3 id="静态0-冒险">静态0-冒险</h3><p>同理,输出由本来的恒定值0瞬间变成1.</p><h3 id="动态冒险">动态冒险</h3><p>电路的输出从本来的1变成0,或0变成1,发生了3次或者3次以上.</p><h3 id="判断两级与-或电路冒险的方法">判断两级与-或电路冒险的方法</h3><ol><li>写出电路的最简积之和表达式</li><li>画出卡诺图,并圈定每个项</li><li>如果任何两个相邻的1不能被同一个圈涵盖,那么这两个1之间转换就会有一个1-冒险.对于n变量的卡诺图,当一个变量变化,而其他n-1个变量不变的情况下就会发生这种转换.</li></ol><hr><p>对于多级电路的冒险的判断还未清楚</p>]]></content>
    
    
    <summary type="html">🥧本文对数字电路第8章的内容进行总结</summary>
    
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="数字电路" scheme="https://hitszzhoujy.com/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>第一章 随机事件与概率</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>第一章总结</h1><h2 id="主线">主线</h2><ol><li>古典概率</li><li>几何概率</li><li>统计概率</li><li>概率的公理化定义</li></ol><h2 id="1-古典概率">1.古典概率</h2><p>定义:若$E $为一个古典概型的实验,则E满足:</p><ol><li>只有有限个基本事件</li><li>每个基本事件发生的可能性相等</li></ol><p>$P(A)=\frac{A中包含的基本事件个数}{基本事件总数} $</p><blockquote><p>用此公式计算时常常要用到排列组合的知识来计算分子分母的基本事件数</p></blockquote><h2 id="2-几何概率">2.几何概率</h2><p>提出:概率的古典定义是在样本空间的基本事件的个数有限时给出的,当基本事件的个数无穷多时就不适用了,因此提出了几何概率.<br>定义: 向一个区域S中掷一质点M,M必然落在S中且M落在S中的区域A上的可能性只与A的度量有关,与其他因素无关,则这个试验为几何概型试验.<br>$$P(A)=\frac{L(A)}{L(S)} $$</p><h2 id="3-统计概率">3.统计概率</h2><p>提出:古典概率和几何概率都只在基本事件的发生是等可能的条件下才成立,有很大的局限性.实际上,很多试验不具有等可能的性质.</p><blockquote><p>如接电话次数为:0,1,2,3…次,这些试验结果不是等可能的.</p></blockquote><p>设$A $为联系于某一试验的事件,将试验在相同条件下重复n次,用m表示A出现的个数,则$\frac{m}{n} $称为事件A的<strong>相对频率</strong>,记作$f_n(A) $<br>$$f_n(A)=\frac{m}{n} $$</p><p>定义:在一组固定条件下,重复做n次试验,当n增大时,事件A出现的频率$f_(A) $围绕着某一常数p摆动,且随着n的增大,这个摆动幅度越来越小,则称p为事件A的概率.<br>$$P(A)=p $$</p><h2 id="概率的公理化定义">概率的公理化定义</h2><p>提出:由于以上三种概率都满足三条相同的性质,根据这三条相同的性质提出概率的三条公理:</p><p><strong>公理1</strong>$$P(A)\geq 0 $$</p><p><strong>公理2</strong>$$P(S)=1 $$</p><p><strong>公理3</strong> 对于互不相容的事件$A_1,A_2,…A_n… $,有$$P(A_1+A_2+A_3\dots+A_n\dots)=P(A_1)+P(A_2)+\dots+P(A_n)+… $$</p>]]></content>
    
    
    <summary type="html">🥧本文对概率率第一章的内容进行总结</summary>
    
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>第二章 条件概率与独立性</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>条件概率与独立性总结</h1><h2 id="主线">主线</h2><ol><li>条件概率,乘法定理</li><li>全概率公式</li><li>贝叶斯公式</li><li>试验的独立性</li><li>重复独立试验,二项概率公式</li><li><strong>二项概率的泊松逼近</strong>(新知识)</li></ol><h2 id="1-条件概率-乘法定理">1.条件概率,乘法定理</h2><h3 id="条件概率">条件概率</h3><p>提出:在实际中,我们除了要考虑实际A发生的概率外,有时还要考虑在实际B发生的基础上,事件A发生的概率.<br>因此提出:条件概率,记作$P(A|B) $,读作&quot;事件A在实际B发生的条件下的条件概率&quot;.<br>$$P(A|B)=\frac{P(AB)}{P(B)} $$</p><p>定义:设A和B为两个任意的事件,且$P(B)&gt;0 $,则称$P(AB)/P(B) $为事件A在实际B发生的条件下的条件概率.<br>$$P(A|B)=\frac{P(AB)}{P(B)} $$</p><p>定理: 条件概率$P(A|B)=\frac{P(AB)}{P(B)} $满足概率的三条公理:</p><ol><li>$P(A|B)\geq 0 $</li><li>$P(S|B)=1 $</li><li>若$A_1,A_2… $互不相容,则有$$P((A_1,A_2+\dots)|B)=P(A_1|B)+P(A_2|B)+\dots $$</li></ol><p>因此,由这三条公理推导出的定理对条件概率也适用.</p><h3 id="乘法定理">乘法定理</h3><p>两个事件积的概率等于其中一个事件的概率与另一事件在前一事件发生条件下的条件概率的乘积,听起来很绕,其实就是:<br>$$P(AB)=P(A)P(B|A) $$<br>推广到n个事件上:$$P(A_1A_2\dots A_n)P(A_1)P(A_2|A_1)\dots P(A_n|A_1A_2\dots P_{n-1}) $$</p><h2 id="全概率公式">全概率公式</h2><p>提出:在概率的计算中,人们希望通过已知的,简单的概率去计算未知的,较为复杂的概率.</p><p>定理(全概率公式) 设$A_1,A_2,…A_n $是互不相容的的事件,且$P(A_i)&gt;0(i=1,2,\dots n)$,若对任一事件B,都有$A_1+A_2+…+A_n\supset B $(即B发生一定导致$A_1,A_2,\dots A_n $中的一个发生),有:<br>$$P(B)=\sum_{i=1}^{n}P(B|A_i) $$</p><h2 id="贝叶斯公式">贝叶斯公式</h2><p>提出:在诊病,已知出现某种症状的许多病因,假如在某次诊断中出现了某种症状,就需要研究引起这种症状的各种病因的概率是多少,哪种病因出现的概率最大.</p><p>定理:设A_1,A_2,…,A_n是互不相容的事件,且$P(A_i) $大于0.若对任意事件B都有$A_1+A_2+\dots+A_n\supset B $则$$P(A_i|B)=\frac{P(A_i)P(B|A_i)}{\sum_{j=1}^{n}P(A_j)P(B|A_j)} $$</p><blockquote><p>式中,$P_i $为先验概率,这种概率一般在试验之前就已经知道了,$P(B|A_i) $为后验概率,它反应在事件发生后对各种可能的原因的概率的新知识.</p></blockquote><h2 id="事件的独立性">事件的独立性</h2><p>提出:如上可知,条件概率和无条件概率一般是不相等的,即$P(B|A)\neq P(B) $即B的发生对A的概率会有影响.如果P(B|A)=P(B),则代表A事件的发生对B事件没有影响,因此可以认为A与B的发生是相互独立的.<br>$$P(B|A)=\frac{P(AB)}{P(A)}=P(B) \implies P(AB)=P(A)P(B) $$<br>定义:设A,B为两个任意的事件</p>]]></content>
    
    
    <summary type="html">🥧本文对概率率第二章的内容进行总结</summary>
    
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>第三章 随机变量及其分布</title>
    <link href="https://hitszzhoujy.com/posts/c8a56023.html"/>
    <id>https://hitszzhoujy.com/posts/c8a56023.html</id>
    <published>2023-10-24T11:19:03.000Z</published>
    <updated>2023-10-24T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>随机变量及其分布</h1><h2 id="主线">主线:</h2><ol><li>随机变量的概念</li><li>离散型随机变量<ol><li>概率分布列</li><li>0-1分布</li><li>二项分布</li><li>泊松分布</li><li>几何分布</li><li>超几何分布</li></ol></li><li>随机变量的分布函数</li><li>连续型随机变量</li></ol><h2 id="随机变量的概念">随机变量的概念</h2><p>提出:在随机试验中,人们观察的常常是一个随机取值的量,如:电话的拨通次数,灯泡的寿命等.对于观察对象与数值无关的试验,也可以使其与数值相关联,如:抛硬币,正面取1,反面取0.</p><h3 id="随机变量的特点">随机变量的特点</h3><p>若用$X$来表示随机变量,则随着试验的重复,$X$可以取不同的值,并且$X$的取值在试验前是无法预测的,具有随机性.例如抛硬币:</p><p>$$<br>X=\begin{cases}</p><p>1 &amp; 正面出现 \</p><p>2 &amp; 反面出现 \</p><p>\end{cases}<br>$$</p><h3 id="定义">定义:</h3><p>设$E$是随机试验,它的样本空间是$S$.如果对$S$中的每个基本事件$e$,都有唯一的实数值$X(e)$与之对应,则称$X(e)$为随机变量,简记为$X$</p><h3 id="分类">分类:</h3><p>$$<br>随机变量=\begin{cases}<br>离散型随机变量 &amp; (随机变量的取值是有限个,或者可列无穷多个)\<br>连续型随机变量 &amp; (取值可以充满一个空间)\<br>\end{cases}<br>$$</p><h2 id="离散型随机变量">离散型随机变量</h2><h3 id="概率分布列">概率分布列</h3><p>提出:对于随机变量$X$,我们不仅想知道它的可能取值,还想知道它每个取值出现的概率.</p><p>设事件“$X=x_k$”的概率为$p_k$,即<br>$$<br>P(X=x_k)=p_k(k=1,2,3…)<br>$$<br>则该式子不仅告诉人们$X$的取值,还告诉人们每个取值的概率大小.人们称该式为$X$的概率分布列,又称分布律.它也可以用表格的形式表现出来:</p><table><thead><tr><th>$X$</th><th>$X_1$</th><th>…</th><th>$X_k$</th><th>…</th><th></th></tr></thead><tbody><tr><td>$P$</td><td>$P_1$</td><td>…</td><td>$P_k$</td><td>…</td><td></td></tr></tbody></table><p>由概率的基本性质可知,任何分布列都满足:<br>$$<br>\begin{split}<br>&amp;1. P_k \geq 0(k=1,2…)\<br>&amp;2. \sum_kP_k=1\<br>\end{split}<br>$$</p><h2 id="0-1分布-伯努利分布-两点分布">0-1分布(伯努利分布,两点分布)</h2><p>定义:若随机变量$X$只能取0,1两个值,则称其服从0-1分布.</p><p>分布列是:<br>$$<br>P(X=1)=p,P(X=0)=1-p , (0&lt;p&lt;1)<br>$$<br>记为:$X\sim B(1,p)$</p><h2 id="二项分布">二项分布</h2><p>定义:</p><p>若随机变量X的分布列<br>$$<br>P(X=k)=C_n^{k}p^k(1-p)^{n-k},(k=0,1,2…,n),(0&lt;p&lt;1)<br>$$<br>则称X服从二项分布,记为$X \sim B(n,p)$</p><p>特别的,当n=1时<br>$$<br>P(X=k)=p^kq^{1-k},(k=0,1)<br>$$</p><h2 id="泊松分布">泊松分布</h2><p>定义:若随机变量X的分布列<br>$$<br>P(X=k)=\frac{\lambda^ke^{-\lambda}}{k!}(\lambda&gt;0)(k=0,1,2…)<br>$$<br>则称X满足参数为$\lambda$的泊松分布分布,并用记号$X \sim P(\lambda)$表示</p><p>同样的泊松分布也满足分布列的两条性质<br>$$<br>P(X=k)\geq 0\<br>\sum_{k=1}^{\infty} P(X=k)=1<br>$$</p><blockquote><p>以n,p为参数的二项分布,当n很大,p很小时,近似于$\lambda=np$为参数的泊松分布.</p></blockquote><h2 id="几何分布-具有无记忆性">几何分布(具有无记忆性)</h2><p>若随机变量的分布列<br>$$<br>P(X=k)=q^{k-1}p(k=1,2…),\<br>0&lt;p&lt;1,q=1-p<br>$$<br>则称随机变量X服从几何分布,记为:$X\sim G§$</p><blockquote><p>几何分布可以理解为,则伯努利试验中,每次试验成功的概率为p,现在独立重复伯努利试验,其第一次出现成功在第k次试验的概率.$q^{k-1}$表示前k-1次试验是失败的,第k次是成功的.</p></blockquote><h2 id="超几何分布">超几何分布</h2><p>设有N件产品,其中有M件次品,今从中取n件,则这n件产品中含的次品数X是一个离散型随机变量.<br>$$<br>P(X=k)=\frac{C_M^{k}C_{N-M}^{n-k}}{C_N^{n}}(k=0,1,2…l)\<br>l=min(M,n)<br>$$</p><blockquote><p>二项分布是有放回的抽取,而超几何分布是无放回的抽取.</p></blockquote><p>定理:<br>$$<br>\lim_{N\to\infty}{\frac{C_M^kC_{N-M}^{n-k}}{C_N^n}}\approx C_N^n(\frac{M}{N})^k(1-\frac{M}{N})^{n-k}\<br>k=0,1…,min(M,n)<br>$$</p><blockquote><p>一般的,当$n\leq 0.1N$时,可以用此近似公式.由于有专门的二项分布表可查,可以节省工作量.</p></blockquote><h2 id="随机变量的分布函数">随机变量的分布函数</h2>]]></content>
    
    
    <summary type="html">🥧本文对概率率第三章的内容进行总结</summary>
    
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="概率论" scheme="https://hitszzhoujy.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
</feed>
